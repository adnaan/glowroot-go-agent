// Code generated by protoc-gen-go.
// source: CollectorService.proto
// DO NOT EDIT!

package org_glowroot_wire_api_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogEvent_Level int32

const (
	LogEvent_NONE  LogEvent_Level = 0
	LogEvent_TRACE LogEvent_Level = 1
	LogEvent_DEBUG LogEvent_Level = 2
	LogEvent_INFO  LogEvent_Level = 3
	LogEvent_WARN  LogEvent_Level = 4
	LogEvent_ERROR LogEvent_Level = 5
)

var LogEvent_Level_name = map[int32]string{
	0: "NONE",
	1: "TRACE",
	2: "DEBUG",
	3: "INFO",
	4: "WARN",
	5: "ERROR",
}
var LogEvent_Level_value = map[string]int32{
	"NONE":  0,
	"TRACE": 1,
	"DEBUG": 2,
	"INFO":  3,
	"WARN":  4,
	"ERROR": 5,
}

func (x LogEvent_Level) String() string {
	return proto.EnumName(LogEvent_Level_name, int32(x))
}
func (LogEvent_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{18, 0} }

type InitMessage struct {
	AgentId       string       `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	AgentRollupId string       `protobuf:"bytes,4,opt,name=agent_rollup_id,json=agentRollupId" json:"agent_rollup_id,omitempty"`
	Environment   *Environment `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
	AgentConfig   *AgentConfig `protobuf:"bytes,3,opt,name=agent_config,json=agentConfig" json:"agent_config,omitempty"`
}

func (m *InitMessage) Reset()                    { *m = InitMessage{} }
func (m *InitMessage) String() string            { return proto.CompactTextString(m) }
func (*InitMessage) ProtoMessage()               {}
func (*InitMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *InitMessage) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *InitMessage) GetAgentRollupId() string {
	if m != nil {
		return m.AgentRollupId
	}
	return ""
}

func (m *InitMessage) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *InitMessage) GetAgentConfig() *AgentConfig {
	if m != nil {
		return m.AgentConfig
	}
	return nil
}

type InitResponse struct {
	AgentConfig            *AgentConfig `protobuf:"bytes,1,opt,name=agent_config,json=agentConfig" json:"agent_config,omitempty"`
	GlowrootCentralVersion string       `protobuf:"bytes,2,opt,name=glowroot_central_version,json=glowrootCentralVersion" json:"glowroot_central_version,omitempty"`
}

func (m *InitResponse) Reset()                    { *m = InitResponse{} }
func (m *InitResponse) String() string            { return proto.CompactTextString(m) }
func (*InitResponse) ProtoMessage()               {}
func (*InitResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *InitResponse) GetAgentConfig() *AgentConfig {
	if m != nil {
		return m.AgentConfig
	}
	return nil
}

func (m *InitResponse) GetGlowrootCentralVersion() string {
	if m != nil {
		return m.GlowrootCentralVersion
	}
	return ""
}

// deprecated in 0.9.5, replaced by AggregateStreamMessage
type OldAggregateMessage struct {
	AgentId            string                       `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	CaptureTime        int64                        `protobuf:"varint,2,opt,name=capture_time,json=captureTime" json:"capture_time,omitempty"`
	AggregatesByType   []*OldAggregatesByType       `protobuf:"bytes,3,rep,name=aggregates_by_type,json=aggregatesByType" json:"aggregates_by_type,omitempty"`
	OldSharedQueryText []string                     `protobuf:"bytes,4,rep,name=old_shared_query_text,json=oldSharedQueryText" json:"old_shared_query_text,omitempty"`
	SharedQueryText    []*Aggregate_SharedQueryText `protobuf:"bytes,5,rep,name=shared_query_text,json=sharedQueryText" json:"shared_query_text,omitempty"`
}

func (m *OldAggregateMessage) Reset()                    { *m = OldAggregateMessage{} }
func (m *OldAggregateMessage) String() string            { return proto.CompactTextString(m) }
func (*OldAggregateMessage) ProtoMessage()               {}
func (*OldAggregateMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *OldAggregateMessage) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *OldAggregateMessage) GetCaptureTime() int64 {
	if m != nil {
		return m.CaptureTime
	}
	return 0
}

func (m *OldAggregateMessage) GetAggregatesByType() []*OldAggregatesByType {
	if m != nil {
		return m.AggregatesByType
	}
	return nil
}

func (m *OldAggregateMessage) GetOldSharedQueryText() []string {
	if m != nil {
		return m.OldSharedQueryText
	}
	return nil
}

func (m *OldAggregateMessage) GetSharedQueryText() []*Aggregate_SharedQueryText {
	if m != nil {
		return m.SharedQueryText
	}
	return nil
}

type AggregateStreamMessage struct {
	// Types that are valid to be assigned to Message:
	//	*AggregateStreamMessage_Header
	//	*AggregateStreamMessage_SharedQueryText
	//	*AggregateStreamMessage_OverallAggregate
	//	*AggregateStreamMessage_TransactionAggregate
	Message isAggregateStreamMessage_Message `protobuf_oneof:"message"`
}

func (m *AggregateStreamMessage) Reset()                    { *m = AggregateStreamMessage{} }
func (m *AggregateStreamMessage) String() string            { return proto.CompactTextString(m) }
func (*AggregateStreamMessage) ProtoMessage()               {}
func (*AggregateStreamMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type isAggregateStreamMessage_Message interface {
	isAggregateStreamMessage_Message()
}

type AggregateStreamMessage_Header struct {
	Header *AggregateStreamHeader `protobuf:"bytes,1,opt,name=header,oneof"`
}
type AggregateStreamMessage_SharedQueryText struct {
	SharedQueryText *Aggregate_SharedQueryText `protobuf:"bytes,2,opt,name=shared_query_text,json=sharedQueryText,oneof"`
}
type AggregateStreamMessage_OverallAggregate struct {
	OverallAggregate *OverallAggregate `protobuf:"bytes,3,opt,name=overall_aggregate,json=overallAggregate,oneof"`
}
type AggregateStreamMessage_TransactionAggregate struct {
	TransactionAggregate *TransactionAggregate `protobuf:"bytes,4,opt,name=transaction_aggregate,json=transactionAggregate,oneof"`
}

func (*AggregateStreamMessage_Header) isAggregateStreamMessage_Message()               {}
func (*AggregateStreamMessage_SharedQueryText) isAggregateStreamMessage_Message()      {}
func (*AggregateStreamMessage_OverallAggregate) isAggregateStreamMessage_Message()     {}
func (*AggregateStreamMessage_TransactionAggregate) isAggregateStreamMessage_Message() {}

func (m *AggregateStreamMessage) GetMessage() isAggregateStreamMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *AggregateStreamMessage) GetHeader() *AggregateStreamHeader {
	if x, ok := m.GetMessage().(*AggregateStreamMessage_Header); ok {
		return x.Header
	}
	return nil
}

func (m *AggregateStreamMessage) GetSharedQueryText() *Aggregate_SharedQueryText {
	if x, ok := m.GetMessage().(*AggregateStreamMessage_SharedQueryText); ok {
		return x.SharedQueryText
	}
	return nil
}

func (m *AggregateStreamMessage) GetOverallAggregate() *OverallAggregate {
	if x, ok := m.GetMessage().(*AggregateStreamMessage_OverallAggregate); ok {
		return x.OverallAggregate
	}
	return nil
}

func (m *AggregateStreamMessage) GetTransactionAggregate() *TransactionAggregate {
	if x, ok := m.GetMessage().(*AggregateStreamMessage_TransactionAggregate); ok {
		return x.TransactionAggregate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AggregateStreamMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AggregateStreamMessage_OneofMarshaler, _AggregateStreamMessage_OneofUnmarshaler, _AggregateStreamMessage_OneofSizer, []interface{}{
		(*AggregateStreamMessage_Header)(nil),
		(*AggregateStreamMessage_SharedQueryText)(nil),
		(*AggregateStreamMessage_OverallAggregate)(nil),
		(*AggregateStreamMessage_TransactionAggregate)(nil),
	}
}

func _AggregateStreamMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AggregateStreamMessage)
	// message
	switch x := m.Message.(type) {
	case *AggregateStreamMessage_Header:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *AggregateStreamMessage_SharedQueryText:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SharedQueryText); err != nil {
			return err
		}
	case *AggregateStreamMessage_OverallAggregate:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OverallAggregate); err != nil {
			return err
		}
	case *AggregateStreamMessage_TransactionAggregate:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransactionAggregate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AggregateStreamMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _AggregateStreamMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AggregateStreamMessage)
	switch tag {
	case 1: // message.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AggregateStreamHeader)
		err := b.DecodeMessage(msg)
		m.Message = &AggregateStreamMessage_Header{msg}
		return true, err
	case 2: // message.shared_query_text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Aggregate_SharedQueryText)
		err := b.DecodeMessage(msg)
		m.Message = &AggregateStreamMessage_SharedQueryText{msg}
		return true, err
	case 3: // message.overall_aggregate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OverallAggregate)
		err := b.DecodeMessage(msg)
		m.Message = &AggregateStreamMessage_OverallAggregate{msg}
		return true, err
	case 4: // message.transaction_aggregate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransactionAggregate)
		err := b.DecodeMessage(msg)
		m.Message = &AggregateStreamMessage_TransactionAggregate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AggregateStreamMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AggregateStreamMessage)
	// message
	switch x := m.Message.(type) {
	case *AggregateStreamMessage_Header:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregateStreamMessage_SharedQueryText:
		s := proto.Size(x.SharedQueryText)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregateStreamMessage_OverallAggregate:
		s := proto.Size(x.OverallAggregate)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregateStreamMessage_TransactionAggregate:
		s := proto.Size(x.TransactionAggregate)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AggregateResponseMessage struct {
	NextDelayMillis int32 `protobuf:"varint,1,opt,name=next_delay_millis,json=nextDelayMillis" json:"next_delay_millis,omitempty"`
}

func (m *AggregateResponseMessage) Reset()                    { *m = AggregateResponseMessage{} }
func (m *AggregateResponseMessage) String() string            { return proto.CompactTextString(m) }
func (*AggregateResponseMessage) ProtoMessage()               {}
func (*AggregateResponseMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *AggregateResponseMessage) GetNextDelayMillis() int32 {
	if m != nil {
		return m.NextDelayMillis
	}
	return 0
}

type GaugeValueMessage struct {
	AgentId     string        `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	GaugeValues []*GaugeValue `protobuf:"bytes,2,rep,name=gauge_values,json=gaugeValues" json:"gauge_values,omitempty"`
}

func (m *GaugeValueMessage) Reset()                    { *m = GaugeValueMessage{} }
func (m *GaugeValueMessage) String() string            { return proto.CompactTextString(m) }
func (*GaugeValueMessage) ProtoMessage()               {}
func (*GaugeValueMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *GaugeValueMessage) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *GaugeValueMessage) GetGaugeValues() []*GaugeValue {
	if m != nil {
		return m.GaugeValues
	}
	return nil
}

type OldTraceMessage struct {
	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Trace   *Trace `protobuf:"bytes,2,opt,name=trace" json:"trace,omitempty"`
}

func (m *OldTraceMessage) Reset()                    { *m = OldTraceMessage{} }
func (m *OldTraceMessage) String() string            { return proto.CompactTextString(m) }
func (*OldTraceMessage) ProtoMessage()               {}
func (*OldTraceMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *OldTraceMessage) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *OldTraceMessage) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type TraceStreamMessage struct {
	// Types that are valid to be assigned to Message:
	//	*TraceStreamMessage_Header
	//	*TraceStreamMessage_SharedQueryText
	//	*TraceStreamMessage_Trace
	Message isTraceStreamMessage_Message `protobuf_oneof:"message"`
}

func (m *TraceStreamMessage) Reset()                    { *m = TraceStreamMessage{} }
func (m *TraceStreamMessage) String() string            { return proto.CompactTextString(m) }
func (*TraceStreamMessage) ProtoMessage()               {}
func (*TraceStreamMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type isTraceStreamMessage_Message interface {
	isTraceStreamMessage_Message()
}

type TraceStreamMessage_Header struct {
	Header *TraceStreamHeader `protobuf:"bytes,1,opt,name=header,oneof"`
}
type TraceStreamMessage_SharedQueryText struct {
	SharedQueryText *Trace_SharedQueryText `protobuf:"bytes,2,opt,name=shared_query_text,json=sharedQueryText,oneof"`
}
type TraceStreamMessage_Trace struct {
	Trace *Trace `protobuf:"bytes,3,opt,name=trace,oneof"`
}

func (*TraceStreamMessage_Header) isTraceStreamMessage_Message()          {}
func (*TraceStreamMessage_SharedQueryText) isTraceStreamMessage_Message() {}
func (*TraceStreamMessage_Trace) isTraceStreamMessage_Message()           {}

func (m *TraceStreamMessage) GetMessage() isTraceStreamMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *TraceStreamMessage) GetHeader() *TraceStreamHeader {
	if x, ok := m.GetMessage().(*TraceStreamMessage_Header); ok {
		return x.Header
	}
	return nil
}

func (m *TraceStreamMessage) GetSharedQueryText() *Trace_SharedQueryText {
	if x, ok := m.GetMessage().(*TraceStreamMessage_SharedQueryText); ok {
		return x.SharedQueryText
	}
	return nil
}

func (m *TraceStreamMessage) GetTrace() *Trace {
	if x, ok := m.GetMessage().(*TraceStreamMessage_Trace); ok {
		return x.Trace
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TraceStreamMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TraceStreamMessage_OneofMarshaler, _TraceStreamMessage_OneofUnmarshaler, _TraceStreamMessage_OneofSizer, []interface{}{
		(*TraceStreamMessage_Header)(nil),
		(*TraceStreamMessage_SharedQueryText)(nil),
		(*TraceStreamMessage_Trace)(nil),
	}
}

func _TraceStreamMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TraceStreamMessage)
	// message
	switch x := m.Message.(type) {
	case *TraceStreamMessage_Header:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *TraceStreamMessage_SharedQueryText:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SharedQueryText); err != nil {
			return err
		}
	case *TraceStreamMessage_Trace:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Trace); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TraceStreamMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _TraceStreamMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TraceStreamMessage)
	switch tag {
	case 1: // message.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TraceStreamHeader)
		err := b.DecodeMessage(msg)
		m.Message = &TraceStreamMessage_Header{msg}
		return true, err
	case 2: // message.shared_query_text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Trace_SharedQueryText)
		err := b.DecodeMessage(msg)
		m.Message = &TraceStreamMessage_SharedQueryText{msg}
		return true, err
	case 3: // message.trace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Trace)
		err := b.DecodeMessage(msg)
		m.Message = &TraceStreamMessage_Trace{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TraceStreamMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TraceStreamMessage)
	// message
	switch x := m.Message.(type) {
	case *TraceStreamMessage_Header:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TraceStreamMessage_SharedQueryText:
		s := proto.Size(x.SharedQueryText)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TraceStreamMessage_Trace:
		s := proto.Size(x.Trace)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LogMessage struct {
	AgentId  string    `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	LogEvent *LogEvent `protobuf:"bytes,2,opt,name=log_event,json=logEvent" json:"log_event,omitempty"`
}

func (m *LogMessage) Reset()                    { *m = LogMessage{} }
func (m *LogMessage) String() string            { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()               {}
func (*LogMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *LogMessage) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *LogMessage) GetLogEvent() *LogEvent {
	if m != nil {
		return m.LogEvent
	}
	return nil
}

type Environment struct {
	HostInfo    *HostInfo    `protobuf:"bytes,1,opt,name=host_info,json=hostInfo" json:"host_info,omitempty"`
	ProcessInfo *ProcessInfo `protobuf:"bytes,2,opt,name=process_info,json=processInfo" json:"process_info,omitempty"`
	JavaInfo    *JavaInfo    `protobuf:"bytes,3,opt,name=java_info,json=javaInfo" json:"java_info,omitempty"`
}

func (m *Environment) Reset()                    { *m = Environment{} }
func (m *Environment) String() string            { return proto.CompactTextString(m) }
func (*Environment) ProtoMessage()               {}
func (*Environment) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *Environment) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

func (m *Environment) GetProcessInfo() *ProcessInfo {
	if m != nil {
		return m.ProcessInfo
	}
	return nil
}

func (m *Environment) GetJavaInfo() *JavaInfo {
	if m != nil {
		return m.JavaInfo
	}
	return nil
}

type HostInfo struct {
	HostName                 string         `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	AvailableProcessors      int32          `protobuf:"varint,2,opt,name=available_processors,json=availableProcessors" json:"available_processors,omitempty"`
	TotalPhysicalMemoryBytes *OptionalInt64 `protobuf:"bytes,3,opt,name=total_physical_memory_bytes,json=totalPhysicalMemoryBytes" json:"total_physical_memory_bytes,omitempty"`
	OsName                   string         `protobuf:"bytes,4,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	OsVersion                string         `protobuf:"bytes,5,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
}

func (m *HostInfo) Reset()                    { *m = HostInfo{} }
func (m *HostInfo) String() string            { return proto.CompactTextString(m) }
func (*HostInfo) ProtoMessage()               {}
func (*HostInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *HostInfo) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *HostInfo) GetAvailableProcessors() int32 {
	if m != nil {
		return m.AvailableProcessors
	}
	return 0
}

func (m *HostInfo) GetTotalPhysicalMemoryBytes() *OptionalInt64 {
	if m != nil {
		return m.TotalPhysicalMemoryBytes
	}
	return nil
}

func (m *HostInfo) GetOsName() string {
	if m != nil {
		return m.OsName
	}
	return ""
}

func (m *HostInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

type ProcessInfo struct {
	ProcessId *OptionalInt64 `protobuf:"bytes,1,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	StartTime int64          `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
}

func (m *ProcessInfo) Reset()                    { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string            { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()               {}
func (*ProcessInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *ProcessInfo) GetProcessId() *OptionalInt64 {
	if m != nil {
		return m.ProcessId
	}
	return nil
}

func (m *ProcessInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

type JavaInfo struct {
	Version              string   `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Vm                   string   `protobuf:"bytes,2,opt,name=vm" json:"vm,omitempty"`
	Arg                  []string `protobuf:"bytes,3,rep,name=arg" json:"arg,omitempty"`
	HeapDumpDefaultDir   string   `protobuf:"bytes,4,opt,name=heap_dump_default_dir,json=heapDumpDefaultDir" json:"heap_dump_default_dir,omitempty"`
	GlowrootAgentVersion string   `protobuf:"bytes,15,opt,name=glowroot_agent_version,json=glowrootAgentVersion" json:"glowroot_agent_version,omitempty"`
}

func (m *JavaInfo) Reset()                    { *m = JavaInfo{} }
func (m *JavaInfo) String() string            { return proto.CompactTextString(m) }
func (*JavaInfo) ProtoMessage()               {}
func (*JavaInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *JavaInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *JavaInfo) GetVm() string {
	if m != nil {
		return m.Vm
	}
	return ""
}

func (m *JavaInfo) GetArg() []string {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *JavaInfo) GetHeapDumpDefaultDir() string {
	if m != nil {
		return m.HeapDumpDefaultDir
	}
	return ""
}

func (m *JavaInfo) GetGlowrootAgentVersion() string {
	if m != nil {
		return m.GlowrootAgentVersion
	}
	return ""
}

type AggregateStreamHeader struct {
	AgentId     string `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	CaptureTime int64  `protobuf:"varint,2,opt,name=capture_time,json=captureTime" json:"capture_time,omitempty"`
}

func (m *AggregateStreamHeader) Reset()                    { *m = AggregateStreamHeader{} }
func (m *AggregateStreamHeader) String() string            { return proto.CompactTextString(m) }
func (*AggregateStreamHeader) ProtoMessage()               {}
func (*AggregateStreamHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *AggregateStreamHeader) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *AggregateStreamHeader) GetCaptureTime() int64 {
	if m != nil {
		return m.CaptureTime
	}
	return 0
}

type OverallAggregate struct {
	TransactionType string     `protobuf:"bytes,1,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
	Aggregate       *Aggregate `protobuf:"bytes,2,opt,name=aggregate" json:"aggregate,omitempty"`
}

func (m *OverallAggregate) Reset()                    { *m = OverallAggregate{} }
func (m *OverallAggregate) String() string            { return proto.CompactTextString(m) }
func (*OverallAggregate) ProtoMessage()               {}
func (*OverallAggregate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *OverallAggregate) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *OverallAggregate) GetAggregate() *Aggregate {
	if m != nil {
		return m.Aggregate
	}
	return nil
}

type TransactionAggregate struct {
	TransactionType string     `protobuf:"bytes,1,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
	TransactionName string     `protobuf:"bytes,2,opt,name=transaction_name,json=transactionName" json:"transaction_name,omitempty"`
	Aggregate       *Aggregate `protobuf:"bytes,3,opt,name=aggregate" json:"aggregate,omitempty"`
}

func (m *TransactionAggregate) Reset()                    { *m = TransactionAggregate{} }
func (m *TransactionAggregate) String() string            { return proto.CompactTextString(m) }
func (*TransactionAggregate) ProtoMessage()               {}
func (*TransactionAggregate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *TransactionAggregate) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *TransactionAggregate) GetTransactionName() string {
	if m != nil {
		return m.TransactionName
	}
	return ""
}

func (m *TransactionAggregate) GetAggregate() *Aggregate {
	if m != nil {
		return m.Aggregate
	}
	return nil
}

type GaugeValue struct {
	GaugeName   string `protobuf:"bytes,1,opt,name=gauge_name,json=gaugeName" json:"gauge_name,omitempty"`
	CaptureTime int64  `protobuf:"varint,2,opt,name=capture_time,json=captureTime" json:"capture_time,omitempty"`
	// for counter gauges, value is the "average delta per second" of the counter, and weight is the
	// number of nanoseconds over which this average delta was calculated
	// for non-counter gauges, value is just the gauge value, and weight is 1
	Value  float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	Weight int64   `protobuf:"varint,4,opt,name=weight" json:"weight,omitempty"`
}

func (m *GaugeValue) Reset()                    { *m = GaugeValue{} }
func (m *GaugeValue) String() string            { return proto.CompactTextString(m) }
func (*GaugeValue) ProtoMessage()               {}
func (*GaugeValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *GaugeValue) GetGaugeName() string {
	if m != nil {
		return m.GaugeName
	}
	return ""
}

func (m *GaugeValue) GetCaptureTime() int64 {
	if m != nil {
		return m.CaptureTime
	}
	return 0
}

func (m *GaugeValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GaugeValue) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type TraceStreamHeader struct {
	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
}

func (m *TraceStreamHeader) Reset()                    { *m = TraceStreamHeader{} }
func (m *TraceStreamHeader) String() string            { return proto.CompactTextString(m) }
func (*TraceStreamHeader) ProtoMessage()               {}
func (*TraceStreamHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *TraceStreamHeader) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

type LogEvent struct {
	Timestamp  int64          `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Level      LogEvent_Level `protobuf:"varint,2,opt,name=level,enum=org_glowroot_wire_api_model.LogEvent_Level" json:"level,omitempty"`
	LoggerName string         `protobuf:"bytes,3,opt,name=logger_name,json=loggerName" json:"logger_name,omitempty"`
	Message    string         `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Throwable  *Throwable     `protobuf:"bytes,5,opt,name=throwable" json:"throwable,omitempty"`
}

func (m *LogEvent) Reset()                    { *m = LogEvent{} }
func (m *LogEvent) String() string            { return proto.CompactTextString(m) }
func (*LogEvent) ProtoMessage()               {}
func (*LogEvent) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *LogEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogEvent) GetLevel() LogEvent_Level {
	if m != nil {
		return m.Level
	}
	return LogEvent_NONE
}

func (m *LogEvent) GetLoggerName() string {
	if m != nil {
		return m.LoggerName
	}
	return ""
}

func (m *LogEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LogEvent) GetThrowable() *Throwable {
	if m != nil {
		return m.Throwable
	}
	return nil
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func init() {
	proto.RegisterType((*InitMessage)(nil), "org_glowroot_wire_api_model.InitMessage")
	proto.RegisterType((*InitResponse)(nil), "org_glowroot_wire_api_model.InitResponse")
	proto.RegisterType((*OldAggregateMessage)(nil), "org_glowroot_wire_api_model.OldAggregateMessage")
	proto.RegisterType((*AggregateStreamMessage)(nil), "org_glowroot_wire_api_model.AggregateStreamMessage")
	proto.RegisterType((*AggregateResponseMessage)(nil), "org_glowroot_wire_api_model.AggregateResponseMessage")
	proto.RegisterType((*GaugeValueMessage)(nil), "org_glowroot_wire_api_model.GaugeValueMessage")
	proto.RegisterType((*OldTraceMessage)(nil), "org_glowroot_wire_api_model.OldTraceMessage")
	proto.RegisterType((*TraceStreamMessage)(nil), "org_glowroot_wire_api_model.TraceStreamMessage")
	proto.RegisterType((*LogMessage)(nil), "org_glowroot_wire_api_model.LogMessage")
	proto.RegisterType((*Environment)(nil), "org_glowroot_wire_api_model.Environment")
	proto.RegisterType((*HostInfo)(nil), "org_glowroot_wire_api_model.HostInfo")
	proto.RegisterType((*ProcessInfo)(nil), "org_glowroot_wire_api_model.ProcessInfo")
	proto.RegisterType((*JavaInfo)(nil), "org_glowroot_wire_api_model.JavaInfo")
	proto.RegisterType((*AggregateStreamHeader)(nil), "org_glowroot_wire_api_model.AggregateStreamHeader")
	proto.RegisterType((*OverallAggregate)(nil), "org_glowroot_wire_api_model.OverallAggregate")
	proto.RegisterType((*TransactionAggregate)(nil), "org_glowroot_wire_api_model.TransactionAggregate")
	proto.RegisterType((*GaugeValue)(nil), "org_glowroot_wire_api_model.GaugeValue")
	proto.RegisterType((*TraceStreamHeader)(nil), "org_glowroot_wire_api_model.TraceStreamHeader")
	proto.RegisterType((*LogEvent)(nil), "org_glowroot_wire_api_model.LogEvent")
	proto.RegisterType((*EmptyMessage)(nil), "org_glowroot_wire_api_model.EmptyMessage")
	proto.RegisterEnum("org_glowroot_wire_api_model.LogEvent_Level", LogEvent_Level_name, LogEvent_Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectorService service

type CollectorServiceClient interface {
	CollectInit(ctx context.Context, in *InitMessage, opts ...grpc.CallOption) (*InitResponse, error)
	// deprecated in 0.9.5, replaced by collectAggregateStream
	CollectAggregates(ctx context.Context, in *OldAggregateMessage, opts ...grpc.CallOption) (*AggregateResponseMessage, error)
	CollectAggregateStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_CollectAggregateStreamClient, error)
	CollectGaugeValues(ctx context.Context, in *GaugeValueMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	// deprecated in 0.9.5, replaced by collectTraceStream
	CollectTrace(ctx context.Context, in *OldTraceMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	CollectTraceStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_CollectTraceStreamClient, error)
	Log(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type collectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectorServiceClient(cc *grpc.ClientConn) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) CollectInit(ctx context.Context, in *InitMessage, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := grpc.Invoke(ctx, "/org_glowroot_wire_api_model.CollectorService/collectInit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) CollectAggregates(ctx context.Context, in *OldAggregateMessage, opts ...grpc.CallOption) (*AggregateResponseMessage, error) {
	out := new(AggregateResponseMessage)
	err := grpc.Invoke(ctx, "/org_glowroot_wire_api_model.CollectorService/collectAggregates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) CollectAggregateStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_CollectAggregateStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CollectorService_serviceDesc.Streams[0], c.cc, "/org_glowroot_wire_api_model.CollectorService/collectAggregateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorServiceCollectAggregateStreamClient{stream}
	return x, nil
}

type CollectorService_CollectAggregateStreamClient interface {
	Send(*AggregateStreamMessage) error
	CloseAndRecv() (*AggregateResponseMessage, error)
	grpc.ClientStream
}

type collectorServiceCollectAggregateStreamClient struct {
	grpc.ClientStream
}

func (x *collectorServiceCollectAggregateStreamClient) Send(m *AggregateStreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorServiceCollectAggregateStreamClient) CloseAndRecv() (*AggregateResponseMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AggregateResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorServiceClient) CollectGaugeValues(ctx context.Context, in *GaugeValueMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/org_glowroot_wire_api_model.CollectorService/collectGaugeValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) CollectTrace(ctx context.Context, in *OldTraceMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/org_glowroot_wire_api_model.CollectorService/collectTrace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) CollectTraceStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_CollectTraceStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CollectorService_serviceDesc.Streams[1], c.cc, "/org_glowroot_wire_api_model.CollectorService/collectTraceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorServiceCollectTraceStreamClient{stream}
	return x, nil
}

type CollectorService_CollectTraceStreamClient interface {
	Send(*TraceStreamMessage) error
	CloseAndRecv() (*EmptyMessage, error)
	grpc.ClientStream
}

type collectorServiceCollectTraceStreamClient struct {
	grpc.ClientStream
}

func (x *collectorServiceCollectTraceStreamClient) Send(m *TraceStreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorServiceCollectTraceStreamClient) CloseAndRecv() (*EmptyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorServiceClient) Log(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/org_glowroot_wire_api_model.CollectorService/log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectorService service

type CollectorServiceServer interface {
	CollectInit(context.Context, *InitMessage) (*InitResponse, error)
	// deprecated in 0.9.5, replaced by collectAggregateStream
	CollectAggregates(context.Context, *OldAggregateMessage) (*AggregateResponseMessage, error)
	CollectAggregateStream(CollectorService_CollectAggregateStreamServer) error
	CollectGaugeValues(context.Context, *GaugeValueMessage) (*EmptyMessage, error)
	// deprecated in 0.9.5, replaced by collectTraceStream
	CollectTrace(context.Context, *OldTraceMessage) (*EmptyMessage, error)
	CollectTraceStream(CollectorService_CollectTraceStreamServer) error
	Log(context.Context, *LogMessage) (*EmptyMessage, error)
}

func RegisterCollectorServiceServer(s *grpc.Server, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_CollectInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org_glowroot_wire_api_model.CollectorService/CollectInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectInit(ctx, req.(*InitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_CollectAggregates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OldAggregateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectAggregates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org_glowroot_wire_api_model.CollectorService/CollectAggregates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectAggregates(ctx, req.(*OldAggregateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_CollectAggregateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).CollectAggregateStream(&collectorServiceCollectAggregateStreamServer{stream})
}

type CollectorService_CollectAggregateStreamServer interface {
	SendAndClose(*AggregateResponseMessage) error
	Recv() (*AggregateStreamMessage, error)
	grpc.ServerStream
}

type collectorServiceCollectAggregateStreamServer struct {
	grpc.ServerStream
}

func (x *collectorServiceCollectAggregateStreamServer) SendAndClose(m *AggregateResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorServiceCollectAggregateStreamServer) Recv() (*AggregateStreamMessage, error) {
	m := new(AggregateStreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CollectorService_CollectGaugeValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GaugeValueMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectGaugeValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org_glowroot_wire_api_model.CollectorService/CollectGaugeValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectGaugeValues(ctx, req.(*GaugeValueMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_CollectTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OldTraceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).CollectTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org_glowroot_wire_api_model.CollectorService/CollectTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).CollectTrace(ctx, req.(*OldTraceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_CollectTraceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).CollectTraceStream(&collectorServiceCollectTraceStreamServer{stream})
}

type CollectorService_CollectTraceStreamServer interface {
	SendAndClose(*EmptyMessage) error
	Recv() (*TraceStreamMessage, error)
	grpc.ServerStream
}

type collectorServiceCollectTraceStreamServer struct {
	grpc.ServerStream
}

func (x *collectorServiceCollectTraceStreamServer) SendAndClose(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorServiceCollectTraceStreamServer) Recv() (*TraceStreamMessage, error) {
	m := new(TraceStreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CollectorService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org_glowroot_wire_api_model.CollectorService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).Log(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org_glowroot_wire_api_model.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "collectInit",
			Handler:    _CollectorService_CollectInit_Handler,
		},
		{
			MethodName: "collectAggregates",
			Handler:    _CollectorService_CollectAggregates_Handler,
		},
		{
			MethodName: "collectGaugeValues",
			Handler:    _CollectorService_CollectGaugeValues_Handler,
		},
		{
			MethodName: "collectTrace",
			Handler:    _CollectorService_CollectTrace_Handler,
		},
		{
			MethodName: "log",
			Handler:    _CollectorService_Log_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collectAggregateStream",
			Handler:       _CollectorService_CollectAggregateStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "collectTraceStream",
			Handler:       _CollectorService_CollectTraceStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "CollectorService.proto",
}

func init() { proto.RegisterFile("CollectorService.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x18, 0xdd, 0x6e, 0xdc, 0xc4,
	0x3a, 0x5e, 0x67, 0x93, 0xec, 0xb7, 0x39, 0xcd, 0x66, 0x9a, 0xe6, 0xec, 0x49, 0x4e, 0x45, 0xb0,
	0x44, 0x9b, 0x16, 0x58, 0x68, 0x5a, 0xaa, 0x8a, 0xbb, 0xfc, 0xb5, 0x49, 0x49, 0x93, 0x32, 0xdd,
	0x16, 0x21, 0x21, 0xcc, 0x64, 0x3d, 0xf1, 0xba, 0x8c, 0x3d, 0x66, 0x3c, 0xbb, 0xe9, 0xa2, 0xde,
	0x21, 0xc1, 0x13, 0x70, 0xcd, 0x1d, 0xb7, 0x48, 0x88, 0xa7, 0xe0, 0x31, 0xb8, 0xe3, 0x21, 0x90,
	0xd0, 0xcc, 0xd8, 0x5e, 0x77, 0x93, 0xee, 0x3a, 0xed, 0xdd, 0xcc, 0xf7, 0xff, 0x3b, 0xdf, 0x67,
	0xc3, 0xf2, 0x36, 0x67, 0x8c, 0x76, 0x24, 0x17, 0x4f, 0xa8, 0xe8, 0x07, 0x1d, 0xda, 0x8a, 0x05,
	0x97, 0x1c, 0xad, 0x72, 0xe1, 0xbb, 0x3e, 0xe3, 0xa7, 0x82, 0x73, 0xe9, 0x9e, 0x06, 0x82, 0xba,
	0x24, 0x0e, 0xdc, 0x90, 0x7b, 0x94, 0xad, 0x2c, 0x6e, 0xfa, 0x34, 0x92, 0xdb, 0x3c, 0x3a, 0x09,
	0x7c, 0x43, 0xbf, 0xb2, 0xb0, 0xe9, 0xfb, 0x82, 0xfa, 0x44, 0xa6, 0x02, 0x56, 0xea, 0x6d, 0x41,
	0x32, 0x69, 0x2b, 0xf3, 0xdb, 0x3c, 0x0c, 0x79, 0x64, 0x6e, 0xce, 0xdf, 0x16, 0xd4, 0xf7, 0xa3,
	0x40, 0x3e, 0xa2, 0x49, 0x42, 0x7c, 0x8a, 0xfe, 0x07, 0x73, 0x44, 0x09, 0x74, 0x03, 0xaf, 0x69,
	0xad, 0x59, 0xeb, 0x35, 0x3c, 0xab, 0xef, 0xfb, 0x1e, 0xba, 0x06, 0x0b, 0x06, 0x25, 0x38, 0x63,
	0xbd, 0x58, 0x51, 0x4c, 0x6b, 0x8a, 0xff, 0x68, 0x30, 0xd6, 0xd0, 0x7d, 0x0f, 0x3d, 0x84, 0x3a,
	0x8d, 0xfa, 0x81, 0xe0, 0x51, 0x48, 0x23, 0xd9, 0xac, 0xac, 0x59, 0xeb, 0xf5, 0x8d, 0xf5, 0xd6,
	0x18, 0x27, 0x5a, 0xbb, 0x43, 0x7a, 0x5c, 0x64, 0x46, 0x9f, 0xc1, 0xbc, 0xd1, 0xd9, 0xd1, 0x0e,
	0x36, 0xed, 0x12, 0xc2, 0x0a, 0x01, 0xc1, 0x75, 0x32, 0xbc, 0x38, 0x3f, 0x5b, 0x30, 0xaf, 0x7c,
	0xc5, 0x34, 0x89, 0x79, 0x94, 0xd0, 0x33, 0xd2, 0xad, 0xb7, 0x90, 0x8e, 0xee, 0x41, 0x33, 0xe7,
	0xe9, 0xd0, 0x48, 0x0a, 0xc2, 0xdc, 0x3e, 0x15, 0x49, 0xc0, 0x23, 0x1d, 0x83, 0x1a, 0x5e, 0xce,
	0xf0, 0xdb, 0x06, 0xfd, 0xcc, 0x60, 0x9d, 0x3f, 0x2b, 0x70, 0xf9, 0x88, 0x79, 0x79, 0xd6, 0x4a,
	0xe4, 0xe2, 0x5d, 0x98, 0xef, 0x90, 0x58, 0xf6, 0x04, 0x75, 0x65, 0x10, 0x52, 0xad, 0xc0, 0xc6,
	0xf5, 0x14, 0xd6, 0x0e, 0x42, 0x8a, 0xbe, 0x06, 0x44, 0x32, 0x89, 0x89, 0x7b, 0x3c, 0x70, 0xe5,
	0x20, 0xa6, 0x4d, 0x7b, 0xcd, 0x5e, 0xaf, 0x6f, 0x7c, 0x3c, 0xd6, 0xc5, 0xa2, 0x2d, 0xc9, 0xd6,
	0xa0, 0x3d, 0x88, 0x29, 0x6e, 0x90, 0x11, 0x08, 0xba, 0x05, 0x57, 0x38, 0xf3, 0xdc, 0xa4, 0x4b,
	0x04, 0xf5, 0xdc, 0xef, 0x7a, 0x54, 0x0c, 0x5c, 0x49, 0x5f, 0xc8, 0xe6, 0xf4, 0x9a, 0xbd, 0x5e,
	0xc3, 0x88, 0x33, 0xef, 0x89, 0xc6, 0x7d, 0xae, 0x50, 0x6d, 0xfa, 0x42, 0xa2, 0x63, 0x58, 0x3c,
	0x4b, 0x5e, 0xd5, 0x16, 0xdd, 0x9d, 0x10, 0xf4, 0xac, 0xa0, 0x47, 0x44, 0xe2, 0x85, 0xe4, 0x55,
	0x80, 0xf3, 0x8b, 0x0d, 0xcb, 0x39, 0xf9, 0x13, 0x29, 0x28, 0x09, 0xb3, 0x78, 0x1e, 0xc0, 0x4c,
	0x97, 0x12, 0x8f, 0x8a, 0x34, 0xd1, 0x1b, 0xe5, 0x74, 0x1a, 0x21, 0x7b, 0x9a, 0x73, 0x6f, 0x0a,
	0xa7, 0x32, 0x90, 0x77, 0x9e, 0x33, 0xa6, 0xd8, 0xdf, 0xd0, 0x99, 0xbd, 0xa9, 0x33, 0xee, 0xa0,
	0xaf, 0x60, 0x91, 0xf7, 0xa9, 0x20, 0x8c, 0xb9, 0x79, 0x06, 0xd2, 0x2e, 0xf8, 0x70, 0x7c, 0x12,
	0x0d, 0x57, 0xae, 0x6c, 0x6f, 0x0a, 0x37, 0xf8, 0x08, 0x0c, 0x75, 0xe1, 0x8a, 0x14, 0x24, 0x4a,
	0x48, 0x47, 0x06, 0x3c, 0x2a, 0x68, 0x98, 0xd6, 0x1a, 0x6e, 0x8d, 0xd5, 0xd0, 0x1e, 0x72, 0x16,
	0xb5, 0x2c, 0xc9, 0x73, 0xe0, 0x5b, 0x35, 0x98, 0x0d, 0x4d, 0x1a, 0x9c, 0xfb, 0xd0, 0xcc, 0xe1,
	0x59, 0x2b, 0x66, 0x29, 0xba, 0x09, 0x8b, 0x11, 0x7d, 0x21, 0x5d, 0x8f, 0x32, 0x32, 0x70, 0xc3,
	0x80, 0xb1, 0x20, 0xd1, 0xd9, 0xaa, 0xe2, 0x05, 0x85, 0xd8, 0x51, 0xf0, 0x47, 0x1a, 0xec, 0x7c,
	0x0f, 0x8b, 0x0f, 0x48, 0xcf, 0xa7, 0xcf, 0x08, 0xeb, 0x95, 0xe9, 0x99, 0x87, 0x30, 0xef, 0x2b,
	0x7a, 0xb7, 0xaf, 0x18, 0x92, 0x66, 0x45, 0x17, 0xde, 0xf5, 0xb1, 0x3e, 0x0e, 0x15, 0xe0, 0xba,
	0x9f, 0x9f, 0x13, 0xe7, 0x04, 0x16, 0x8e, 0x98, 0xa7, 0x9f, 0xd5, 0x12, 0x9a, 0xef, 0x41, 0x55,
	0x2a, 0xd2, 0xb4, 0x3c, 0x9c, 0x49, 0x61, 0xed, 0x50, 0x6c, 0x18, 0x9c, 0x9f, 0x2a, 0x80, 0x34,
	0xe0, 0xd5, 0x4a, 0xde, 0x1b, 0xa9, 0xe4, 0xd6, 0x64, 0x89, 0xaf, 0xa9, 0xe2, 0x6f, 0x5e, 0x5f,
	0xc5, 0x1b, 0x93, 0x85, 0x96, 0xa9, 0xe0, 0x4f, 0x33, 0xe7, 0xed, 0xb2, 0xce, 0xef, 0x4d, 0xa5,
	0xee, 0x17, 0xab, 0xe6, 0x5b, 0x80, 0x03, 0xee, 0x97, 0x08, 0xf6, 0x16, 0xd4, 0x18, 0xf7, 0x5d,
	0xda, 0x1f, 0x0e, 0x9f, 0xf7, 0xc6, 0xea, 0x3c, 0xe0, 0xfe, 0xae, 0x22, 0xc6, 0x73, 0x2c, 0x3d,
	0x39, 0x7f, 0x59, 0x50, 0x2f, 0xcc, 0x24, 0x25, 0xb3, 0xcb, 0x13, 0xe9, 0x06, 0xd1, 0x09, 0x4f,
	0x43, 0x3e, 0x5e, 0xe6, 0x1e, 0x4f, 0xe4, 0x7e, 0x74, 0xc2, 0xf1, 0x5c, 0x37, 0x3d, 0xa9, 0x61,
	0x13, 0x0b, 0xde, 0xa1, 0x49, 0x62, 0xc4, 0x94, 0x99, 0x8b, 0x8f, 0x0d, 0x83, 0x96, 0x54, 0x8f,
	0x87, 0x17, 0x65, 0xd0, 0x73, 0xd2, 0x27, 0x46, 0x92, 0x5d, 0xc2, 0xa0, 0x87, 0xa4, 0x4f, 0x8c,
	0x41, 0xcf, 0xd3, 0x93, 0xf3, 0x8f, 0x05, 0x73, 0x99, 0x9d, 0x68, 0x35, 0xf5, 0x30, 0x22, 0x21,
	0x4d, 0x23, 0xaa, 0x4d, 0x3f, 0x24, 0xa1, 0x7a, 0xea, 0x97, 0x48, 0x9f, 0x04, 0x8c, 0x1c, 0x33,
	0xea, 0xa6, 0x66, 0x70, 0x91, 0x68, 0x17, 0xaa, 0xf8, 0x72, 0x8e, 0x7b, 0x9c, 0xa3, 0x50, 0x00,
	0xab, 0x92, 0x4b, 0xc2, 0xdc, 0xb8, 0x3b, 0x48, 0x82, 0x0e, 0x61, 0x6e, 0x48, 0x43, 0x2e, 0x06,
	0xee, 0xf1, 0x40, 0xd2, 0x24, 0x35, 0xf9, 0xe6, 0xf8, 0x17, 0x2c, 0x56, 0x4f, 0x08, 0x61, 0xfb,
	0x91, 0xbc, 0x7b, 0x07, 0x37, 0xb5, 0xb8, 0xc7, 0xa9, 0xb4, 0x47, 0x5a, 0xd8, 0x96, 0x92, 0x85,
	0xfe, 0x0b, 0xb3, 0x3c, 0x31, 0x86, 0x9b, 0x7d, 0x64, 0x86, 0x27, 0xda, 0xec, 0xab, 0x00, 0x3c,
	0xc9, 0x67, 0x70, 0x55, 0xe3, 0x6a, 0x3c, 0xc9, 0xc6, 0xee, 0x29, 0xd4, 0x0b, 0xf1, 0x45, 0xfb,
	0x00, 0x79, 0x7e, 0xbc, 0x34, 0xc9, 0x17, 0x31, 0xb0, 0x96, 0xe5, 0xc7, 0x53, 0x8a, 0x13, 0x49,
	0x84, 0x2c, 0xce, 0xe6, 0x9a, 0x86, 0xa8, 0xc9, 0xec, 0xfc, 0x66, 0xc1, 0x5c, 0x96, 0x0f, 0xd4,
	0x84, 0xd9, 0xcc, 0xc2, 0xb4, 0x90, 0xd3, 0x2b, 0xba, 0x04, 0x95, 0x7e, 0x98, 0xae, 0x0e, 0x95,
	0x7e, 0x88, 0x1a, 0x60, 0x13, 0xe1, 0xeb, 0x09, 0x5e, 0xc3, 0xea, 0xa8, 0x46, 0x70, 0x97, 0x92,
	0xd8, 0xf5, 0x7a, 0x61, 0xec, 0x7a, 0xf4, 0x84, 0xf4, 0x98, 0x74, 0xbd, 0x40, 0xa4, 0x71, 0x40,
	0x0a, 0xb9, 0xd3, 0x0b, 0xe3, 0x1d, 0x83, 0xda, 0x09, 0x04, 0xba, 0x03, 0xf9, 0x16, 0xe2, 0x9a,
	0x0e, 0xca, 0xb4, 0x2f, 0x68, 0x9e, 0xa5, 0x0c, 0xab, 0xf7, 0x9c, 0x2c, 0x54, 0x4f, 0xe1, 0xca,
	0xb9, 0xe3, 0xf0, 0xed, 0x56, 0x14, 0xe7, 0x07, 0x0b, 0x1a, 0xa3, 0x73, 0x0a, 0xdd, 0x80, 0x46,
	0x71, 0x26, 0xe9, 0xad, 0xc5, 0x88, 0x5e, 0x28, 0xc0, 0xf5, 0x0a, 0xb2, 0x03, 0xb5, 0xe1, 0xc8,
	0x32, 0xfd, 0x74, 0xad, 0xdc, 0xe8, 0xc5, 0x43, 0x46, 0xe7, 0x77, 0x0b, 0x96, 0xce, 0x9b, 0x65,
	0x17, 0xb1, 0x64, 0x84, 0x54, 0x17, 0x63, 0xe5, 0x0c, 0xa9, 0xae, 0xca, 0x57, 0x8c, 0xb6, 0xdf,
	0xd4, 0xe8, 0x97, 0x00, 0xc3, 0xd9, 0xa4, 0x0a, 0xce, 0x8c, 0xb6, 0x42, 0xfb, 0xd6, 0x34, 0x44,
	0xab, 0x2c, 0xb1, 0x2d, 0x2e, 0x41, 0x55, 0x8f, 0x45, 0x6d, 0x91, 0x85, 0xcd, 0x05, 0x2d, 0xc3,
	0xcc, 0x29, 0x0d, 0xfc, 0xae, 0xd4, 0x15, 0x65, 0xe3, 0xf4, 0xe6, 0xb4, 0x60, 0xf1, 0xcc, 0x50,
	0x19, 0x53, 0x0b, 0xce, 0x1f, 0x15, 0x98, 0xcb, 0x9e, 0x59, 0xf4, 0x7f, 0xa8, 0x29, 0x2b, 0x12,
	0x49, 0xc2, 0x58, 0x13, 0xda, 0x78, 0x08, 0x40, 0x9b, 0x50, 0x65, 0xb4, 0x4f, 0x99, 0x36, 0xf2,
	0xd2, 0xc6, 0xfb, 0xa5, 0x9e, 0xee, 0xd6, 0x81, 0x62, 0xc1, 0x86, 0x13, 0xbd, 0x03, 0x75, 0xc6,
	0x7d, 0x9f, 0x0a, 0x13, 0x0e, 0x5b, 0xdb, 0x02, 0x06, 0xa4, 0xe3, 0xd1, 0xcc, 0xc7, 0x4a, 0xda,
	0x29, 0xd9, 0x55, 0x25, 0x47, 0x76, 0x05, 0x3f, 0x55, 0xaf, 0x99, 0x7e, 0x31, 0x26, 0x25, 0xa7,
	0x9d, 0x51, 0xe3, 0x21, 0xa3, 0x73, 0x1f, 0xaa, 0xda, 0x20, 0x34, 0x07, 0xd3, 0x87, 0x47, 0x87,
	0xbb, 0x8d, 0x29, 0x54, 0x83, 0x6a, 0x1b, 0x6f, 0x6e, 0xef, 0x36, 0x2c, 0x75, 0xdc, 0xd9, 0xdd,
	0x7a, 0xfa, 0xa0, 0x51, 0x51, 0xf8, 0xfd, 0xc3, 0xfb, 0x47, 0x0d, 0x5b, 0x9d, 0xbe, 0xd8, 0xc4,
	0x87, 0x8d, 0x69, 0x85, 0xde, 0xc5, 0xf8, 0x08, 0x37, 0xaa, 0xce, 0x25, 0x98, 0xdf, 0x0d, 0x63,
	0x39, 0x48, 0xa7, 0xde, 0xc6, 0xaf, 0x33, 0xd0, 0x18, 0xfd, 0x46, 0x44, 0xc7, 0x50, 0xef, 0x18,
	0x98, 0xfa, 0xb6, 0x41, 0xe3, 0x07, 0x4a, 0xe1, 0x53, 0x6f, 0xe5, 0xc6, 0x44, 0xca, 0xfc, 0x43,
	0xe9, 0x25, 0x2c, 0xa6, 0x3a, 0x86, 0x1f, 0x06, 0xa8, 0xfc, 0x47, 0x44, 0xa6, 0xf1, 0x93, 0x92,
	0x75, 0x3e, 0xb2, 0x14, 0xfe, 0x68, 0xc1, 0xf2, 0xa8, 0x7a, 0x53, 0x79, 0xe8, 0xf6, 0x45, 0x56,
	0xf8, 0xb7, 0x33, 0x63, 0xdd, 0x42, 0x1c, 0x50, 0x6a, 0xc7, 0xb0, 0xf7, 0x12, 0xd4, 0x2a, 0xb9,
	0x41, 0x96, 0x8b, 0x7b, 0x31, 0xe1, 0xc8, 0x87, 0xf9, 0x54, 0xa1, 0x6e, 0x37, 0xf4, 0xc1, 0xa4,
	0x90, 0x17, 0x37, 0xd2, 0x8b, 0x28, 0x12, 0xb9, 0x67, 0x85, 0xbe, 0x46, 0x1f, 0x95, 0x5d, 0x2b,
	0x2f, 0xae, 0x71, 0xdd, 0x42, 0x5f, 0x82, 0xcd, 0xb8, 0x8f, 0xae, 0x4f, 0xea, 0xf0, 0x8b, 0x0b,
	0xdf, 0xba, 0x0a, 0xab, 0x5c, 0xf8, 0xad, 0x8c, 0xb6, 0xa5, 0x68, 0x5b, 0x24, 0x0e, 0x5a, 0x9a,
	0xf6, 0x78, 0x46, 0xff, 0xfb, 0xb8, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xe5, 0x53,
	0x3f, 0x71, 0x11, 0x00, 0x00,
}
