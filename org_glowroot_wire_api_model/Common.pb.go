// Code generated by protoc-gen-go.
// source: Common.proto
// DO NOT EDIT!

package org_glowroot_wire_api_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Throwable struct {
	ClassName string `protobuf:"bytes,1,opt,name=className" json:"className,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// for inner "cause" throwable, stack trace only includes frames not in common with the
	// enclosing throwable
	StackTraceElement []*StackTraceElement `protobuf:"bytes,3,rep,name=stack_trace_element,json=stackTraceElement" json:"stack_trace_element,omitempty"`
	// this is for printing '... 18 more' at end of inner "cause" instead of the entire stack trace
	FramesInCommonWithEnclosing int32        `protobuf:"varint,4,opt,name=frames_in_common_with_enclosing,json=framesInCommonWithEnclosing" json:"frames_in_common_with_enclosing,omitempty"`
	Cause                       *Throwable   `protobuf:"bytes,5,opt,name=cause" json:"cause,omitempty"`
	Suppressed                  []*Throwable `protobuf:"bytes,6,rep,name=suppressed" json:"suppressed,omitempty"`
}

func (m *Throwable) Reset()                    { *m = Throwable{} }
func (m *Throwable) String() string            { return proto.CompactTextString(m) }
func (*Throwable) ProtoMessage()               {}
func (*Throwable) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Throwable) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *Throwable) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Throwable) GetStackTraceElement() []*StackTraceElement {
	if m != nil {
		return m.StackTraceElement
	}
	return nil
}

func (m *Throwable) GetFramesInCommonWithEnclosing() int32 {
	if m != nil {
		return m.FramesInCommonWithEnclosing
	}
	return 0
}

func (m *Throwable) GetCause() *Throwable {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (m *Throwable) GetSuppressed() []*Throwable {
	if m != nil {
		return m.Suppressed
	}
	return nil
}

type StackTraceElement struct {
	ClassName  string `protobuf:"bytes,1,opt,name=class_name,json=className" json:"class_name,omitempty"`
	MethodName string `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	FileName   string `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// sint since can be negative
	LineNumber int32 `protobuf:"zigzag32,4,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
}

func (m *StackTraceElement) Reset()                    { *m = StackTraceElement{} }
func (m *StackTraceElement) String() string            { return proto.CompactTextString(m) }
func (*StackTraceElement) ProtoMessage()               {}
func (*StackTraceElement) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *StackTraceElement) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *StackTraceElement) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *StackTraceElement) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *StackTraceElement) GetLineNumber() int32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

type OptionalInt64 struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *OptionalInt64) Reset()                    { *m = OptionalInt64{} }
func (m *OptionalInt64) String() string            { return proto.CompactTextString(m) }
func (*OptionalInt64) ProtoMessage()               {}
func (*OptionalInt64) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *OptionalInt64) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type OptionalInt32 struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *OptionalInt32) Reset()                    { *m = OptionalInt32{} }
func (m *OptionalInt32) String() string            { return proto.CompactTextString(m) }
func (*OptionalInt32) ProtoMessage()               {}
func (*OptionalInt32) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *OptionalInt32) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type OptionalDouble struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *OptionalDouble) Reset()                    { *m = OptionalDouble{} }
func (m *OptionalDouble) String() string            { return proto.CompactTextString(m) }
func (*OptionalDouble) ProtoMessage()               {}
func (*OptionalDouble) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *OptionalDouble) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Throwable)(nil), "org_glowroot_wire_api_model.Throwable")
	proto.RegisterType((*StackTraceElement)(nil), "org_glowroot_wire_api_model.StackTraceElement")
	proto.RegisterType((*OptionalInt64)(nil), "org_glowroot_wire_api_model.OptionalInt64")
	proto.RegisterType((*OptionalInt32)(nil), "org_glowroot_wire_api_model.OptionalInt32")
	proto.RegisterType((*OptionalDouble)(nil), "org_glowroot_wire_api_model.OptionalDouble")
}

func init() { proto.RegisterFile("Common.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6f, 0xd4, 0x30,
	0x10, 0xc5, 0x95, 0x2e, 0x29, 0x64, 0x16, 0x90, 0xd6, 0x70, 0x88, 0xb4, 0xa0, 0x46, 0x2b, 0xa8,
	0x72, 0xf2, 0x61, 0x8b, 0x38, 0x71, 0x2a, 0x2d, 0x52, 0x2f, 0x05, 0x85, 0x4a, 0xdc, 0xb0, 0xbc,
	0xd9, 0x69, 0x62, 0xe1, 0x3f, 0x91, 0xed, 0x90, 0xcf, 0xc1, 0x27, 0xe5, 0x2b, 0x20, 0xdb, 0x04,
	0x68, 0x41, 0x15, 0x47, 0xbf, 0x79, 0xcf, 0x9a, 0xf9, 0xe9, 0xc1, 0xc3, 0xb7, 0x46, 0x29, 0xa3,
	0xe9, 0x60, 0x8d, 0x37, 0x64, 0x6d, 0x6c, 0xc7, 0x3a, 0x69, 0x26, 0x6b, 0x8c, 0x67, 0x93, 0xb0,
	0xc8, 0xf8, 0x20, 0x98, 0x32, 0x7b, 0x94, 0x9b, 0xef, 0x07, 0x50, 0x5c, 0xf5, 0xd6, 0x4c, 0x7c,
	0x27, 0x91, 0x3c, 0x83, 0xa2, 0x95, 0xdc, 0xb9, 0x4b, 0xae, 0xb0, 0xcc, 0xaa, 0xac, 0x2e, 0x9a,
	0xdf, 0x02, 0x29, 0xe1, 0xbe, 0x42, 0xe7, 0x78, 0x87, 0xe5, 0x41, 0x9c, 0xcd, 0x4f, 0xf2, 0x19,
	0x9e, 0x38, 0xcf, 0xdb, 0x2f, 0xcc, 0x5b, 0xde, 0x22, 0x43, 0x89, 0x0a, 0xb5, 0x2f, 0x17, 0xd5,
	0xa2, 0x5e, 0x6e, 0x29, 0xbd, 0x63, 0x01, 0xfa, 0x31, 0xe4, 0xae, 0x42, 0xec, 0x3c, 0xa5, 0x9a,
	0x95, 0xbb, 0x2d, 0x91, 0x33, 0x38, 0xba, 0xb6, 0x5c, 0xa1, 0x63, 0x42, 0xb3, 0x36, 0x1e, 0xc7,
	0x26, 0xe1, 0x7b, 0x86, 0xba, 0x95, 0xc6, 0x09, 0xdd, 0x95, 0xf7, 0xaa, 0xac, 0xce, 0x9b, 0x75,
	0xb2, 0x5d, 0xe8, 0x44, 0xe0, 0x93, 0xf0, 0xfd, 0xf9, 0x6c, 0x21, 0x6f, 0x20, 0x6f, 0xf9, 0xe8,
	0xb0, 0xcc, 0xab, 0xac, 0x5e, 0x6e, 0x8f, 0xef, 0xdc, 0xeb, 0x17, 0x94, 0x26, 0x85, 0xc8, 0x3b,
	0x00, 0x37, 0x0e, 0x83, 0x45, 0xe7, 0x70, 0x5f, 0x1e, 0xc6, 0xd3, 0xfe, 0xf7, 0x8b, 0x3f, 0x92,
	0x9b, 0x6f, 0x19, 0xac, 0xfe, 0x3a, 0x9a, 0x3c, 0x07, 0x88, 0xa0, 0x99, 0xfe, 0x27, 0xfa, 0x23,
	0x58, 0x2a, 0xf4, 0xbd, 0xd9, 0xa7, 0x79, 0xc2, 0x0f, 0x49, 0x8a, 0x86, 0x35, 0x14, 0xd7, 0x42,
	0x62, 0x1a, 0x2f, 0xe2, 0xf8, 0x41, 0x10, 0xe6, 0xb4, 0x14, 0x1a, 0x99, 0x1e, 0xd5, 0x0e, 0x6d,
	0x44, 0xb5, 0x6a, 0x20, 0x48, 0x97, 0x51, 0xd9, 0xbc, 0x84, 0x47, 0xef, 0x07, 0x2f, 0x8c, 0xe6,
	0xf2, 0x42, 0xfb, 0xd7, 0xaf, 0xc8, 0x53, 0xc8, 0xbf, 0x72, 0x39, 0xa6, 0x4d, 0x16, 0x4d, 0x7a,
	0xdc, 0xb2, 0x9d, 0x6c, 0x6f, 0xda, 0xf2, 0xd9, 0x76, 0x0c, 0x8f, 0x67, 0xdb, 0x99, 0x19, 0x43,
	0xaf, 0x6e, 0xf8, 0xb2, 0x9f, 0xbe, 0xd3, 0x17, 0x10, 0xaa, 0x49, 0x67, 0x7c, 0x34, 0xe0, 0xa3,
	0x7c, 0x10, 0x34, 0xe2, 0x3b, 0xcd, 0x3f, 0x84, 0xfa, 0xee, 0x0e, 0x63, 0x8b, 0x4f, 0x7e, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xb2, 0x5d, 0xd2, 0x0a, 0xd5, 0x02, 0x00, 0x00,
}
