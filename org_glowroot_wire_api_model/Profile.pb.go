// Code generated by protoc-gen-go.
// source: Profile.proto
// DO NOT EDIT!

package org_glowroot_wire_api_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Profile_LeafThreadState int32

const (
	Profile_NONE          Profile_LeafThreadState = 0
	Profile_NEW           Profile_LeafThreadState = 1
	Profile_RUNNABLE      Profile_LeafThreadState = 2
	Profile_BLOCKED       Profile_LeafThreadState = 3
	Profile_WAITING       Profile_LeafThreadState = 4
	Profile_TIMED_WAITING Profile_LeafThreadState = 5
	Profile_TERMINATED    Profile_LeafThreadState = 6
)

var Profile_LeafThreadState_name = map[int32]string{
	0: "NONE",
	1: "NEW",
	2: "RUNNABLE",
	3: "BLOCKED",
	4: "WAITING",
	5: "TIMED_WAITING",
	6: "TERMINATED",
}
var Profile_LeafThreadState_value = map[string]int32{
	"NONE":          0,
	"NEW":           1,
	"RUNNABLE":      2,
	"BLOCKED":       3,
	"WAITING":       4,
	"TIMED_WAITING": 5,
	"TERMINATED":    6,
}

func (x Profile_LeafThreadState) String() string {
	return proto.EnumName(Profile_LeafThreadState_name, int32(x))
}
func (Profile_LeafThreadState) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

type Profile struct {
	PackageName []string `protobuf:"bytes,1,rep,name=package_name,json=packageName" json:"package_name,omitempty"`
	ClassName   []string `protobuf:"bytes,2,rep,name=class_name,json=className" json:"class_name,omitempty"`
	MethodName  []string `protobuf:"bytes,3,rep,name=method_name,json=methodName" json:"method_name,omitempty"`
	FileName    []string `protobuf:"bytes,4,rep,name=file_name,json=fileName" json:"file_name,omitempty"`
	// node ordering is pre-order depth-first
	// IMPORTANT there can be multiple "root" nodes (with depth=0)
	Node []*Profile_ProfileNode `protobuf:"bytes,5,rep,name=node" json:"node,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Profile) GetPackageName() []string {
	if m != nil {
		return m.PackageName
	}
	return nil
}

func (m *Profile) GetClassName() []string {
	if m != nil {
		return m.ClassName
	}
	return nil
}

func (m *Profile) GetMethodName() []string {
	if m != nil {
		return m.MethodName
	}
	return nil
}

func (m *Profile) GetFileName() []string {
	if m != nil {
		return m.FileName
	}
	return nil
}

func (m *Profile) GetNode() []*Profile_ProfileNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type Profile_ProfileNode struct {
	Depth            int32                   `protobuf:"varint,1,opt,name=depth" json:"depth,omitempty"`
	PackageNameIndex int32                   `protobuf:"varint,2,opt,name=package_name_index,json=packageNameIndex" json:"package_name_index,omitempty"`
	ClassNameIndex   int32                   `protobuf:"varint,3,opt,name=class_name_index,json=classNameIndex" json:"class_name_index,omitempty"`
	MethodNameIndex  int32                   `protobuf:"varint,4,opt,name=method_name_index,json=methodNameIndex" json:"method_name_index,omitempty"`
	FileNameIndex    int32                   `protobuf:"varint,5,opt,name=file_name_index,json=fileNameIndex" json:"file_name_index,omitempty"`
	LineNumber       int32                   `protobuf:"zigzag32,6,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	LeafThreadState  Profile_LeafThreadState `protobuf:"varint,7,opt,name=leaf_thread_state,json=leafThreadState,enum=org_glowroot_wire_api_model.Profile_LeafThreadState" json:"leaf_thread_state,omitempty"`
	SampleCount      int64                   `protobuf:"varint,8,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
}

func (m *Profile_ProfileNode) Reset()                    { *m = Profile_ProfileNode{} }
func (m *Profile_ProfileNode) String() string            { return proto.CompactTextString(m) }
func (*Profile_ProfileNode) ProtoMessage()               {}
func (*Profile_ProfileNode) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

func (m *Profile_ProfileNode) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Profile_ProfileNode) GetPackageNameIndex() int32 {
	if m != nil {
		return m.PackageNameIndex
	}
	return 0
}

func (m *Profile_ProfileNode) GetClassNameIndex() int32 {
	if m != nil {
		return m.ClassNameIndex
	}
	return 0
}

func (m *Profile_ProfileNode) GetMethodNameIndex() int32 {
	if m != nil {
		return m.MethodNameIndex
	}
	return 0
}

func (m *Profile_ProfileNode) GetFileNameIndex() int32 {
	if m != nil {
		return m.FileNameIndex
	}
	return 0
}

func (m *Profile_ProfileNode) GetLineNumber() int32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *Profile_ProfileNode) GetLeafThreadState() Profile_LeafThreadState {
	if m != nil {
		return m.LeafThreadState
	}
	return Profile_NONE
}

func (m *Profile_ProfileNode) GetSampleCount() int64 {
	if m != nil {
		return m.SampleCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Profile)(nil), "org_glowroot_wire_api_model.Profile")
	proto.RegisterType((*Profile_ProfileNode)(nil), "org_glowroot_wire_api_model.Profile.ProfileNode")
	proto.RegisterEnum("org_glowroot_wire_api_model.Profile_LeafThreadState", Profile_LeafThreadState_name, Profile_LeafThreadState_value)
}

func init() { proto.RegisterFile("Profile.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x6e, 0x9b, 0x40,
	0x14, 0x85, 0x8b, 0x01, 0xff, 0x5c, 0x62, 0x1b, 0x8f, 0xba, 0x40, 0x8d, 0xa2, 0xd0, 0x2c, 0x2a,
	0x54, 0x55, 0xa8, 0x4a, 0xfb, 0x02, 0x76, 0x8c, 0x2a, 0x54, 0x67, 0x52, 0x51, 0xaa, 0x2c, 0xa7,
	0x13, 0x73, 0x6d, 0xa3, 0x02, 0x83, 0x30, 0x51, 0xfa, 0x68, 0x7d, 0xb1, 0xee, 0xab, 0x99, 0xc1,
	0x89, 0xdb, 0x45, 0x95, 0x15, 0x9a, 0xef, 0x7c, 0x03, 0x9c, 0xab, 0x0b, 0xe3, 0x2f, 0x8d, 0xd8,
	0xe4, 0x05, 0x86, 0x75, 0x23, 0x5a, 0x41, 0x4e, 0x45, 0xb3, 0x65, 0xdb, 0x42, 0x3c, 0x34, 0x42,
	0xb4, 0xec, 0x21, 0x6f, 0x90, 0xf1, 0x3a, 0x67, 0xa5, 0xc8, 0xb0, 0xb8, 0xf8, 0x65, 0xc3, 0xa0,
	0xd3, 0xc9, 0x6b, 0x38, 0xa9, 0xf9, 0xfa, 0x07, 0xdf, 0x22, 0xab, 0x78, 0x89, 0x9e, 0xe1, 0x9b,
	0xc1, 0x28, 0x71, 0x3a, 0x46, 0x79, 0x89, 0xe4, 0x0c, 0x60, 0x5d, 0xf0, 0xfd, 0x5e, 0x0b, 0x3d,
	0x25, 0x8c, 0x14, 0x51, 0xf1, 0x39, 0x38, 0x25, 0xb6, 0x3b, 0x91, 0xe9, 0xdc, 0x54, 0x39, 0x68,
	0xa4, 0x84, 0x53, 0x18, 0xc9, 0x4f, 0xe9, 0xd8, 0x52, 0xf1, 0x50, 0x02, 0x15, 0x2e, 0xc1, 0xaa,
	0x44, 0x86, 0x9e, 0xed, 0x9b, 0x81, 0x73, 0xf9, 0x3e, 0xfc, 0xcf, 0x7f, 0x87, 0x87, 0x8a, 0xdd,
	0x93, 0x8a, 0x0c, 0x13, 0x75, 0xfb, 0xd5, 0xef, 0x1e, 0x38, 0x47, 0x94, 0xbc, 0x04, 0x3b, 0xc3,
	0xba, 0xdd, 0x79, 0x86, 0x6f, 0x04, 0x76, 0xa2, 0x0f, 0xe4, 0x1d, 0x90, 0xe3, 0xae, 0x2c, 0xaf,
	0x32, 0xfc, 0xe9, 0xf5, 0x94, 0xe2, 0x1e, 0x35, 0x8e, 0x25, 0x27, 0x01, 0xb8, 0x4f, 0xb5, 0x3b,
	0xd7, 0x54, 0xee, 0xe4, 0xb1, 0xbc, 0x36, 0xdf, 0xc2, 0xec, 0x68, 0x02, 0x9d, 0x6a, 0x29, 0x75,
	0xfa, 0x34, 0x07, 0xed, 0xbe, 0x81, 0xe9, 0xe3, 0x30, 0x3a, 0xd3, 0x56, 0xe6, 0xf8, 0x30, 0x12,
	0xed, 0x9d, 0x83, 0x53, 0xe4, 0x15, 0xb2, 0xea, 0xbe, 0xbc, 0xc3, 0xc6, 0xeb, 0xfb, 0x46, 0x30,
	0x4b, 0x40, 0x22, 0xaa, 0x08, 0xf9, 0x0e, 0xb3, 0x02, 0xf9, 0x86, 0xb5, 0xbb, 0x06, 0x79, 0xc6,
	0xf6, 0x2d, 0x6f, 0xd1, 0x1b, 0xf8, 0x46, 0x30, 0xb9, 0xfc, 0xf8, 0xac, 0x29, 0xae, 0x90, 0x6f,
	0x52, 0x75, 0xf9, 0xab, 0xbc, 0x9b, 0x4c, 0x8b, 0xbf, 0x81, 0x5c, 0x8d, 0x3d, 0x2f, 0xeb, 0x02,
	0xd9, 0x5a, 0xdc, 0x57, 0xad, 0x37, 0xf4, 0x8d, 0xc0, 0x4c, 0x1c, 0xcd, 0xae, 0x24, 0xba, 0x10,
	0x30, 0xfd, 0xe7, 0x35, 0x64, 0x08, 0x16, 0xbd, 0xa1, 0x91, 0xfb, 0x82, 0x0c, 0xc0, 0xa4, 0xd1,
	0xad, 0x6b, 0x90, 0x13, 0x18, 0x26, 0xdf, 0x28, 0x9d, 0x2f, 0x56, 0x91, 0xdb, 0x23, 0x0e, 0x0c,
	0x16, 0xab, 0x9b, 0xab, 0xcf, 0xd1, 0xd2, 0x35, 0xe5, 0xe1, 0x76, 0x1e, 0xa7, 0x31, 0xfd, 0xe4,
	0x5a, 0x64, 0x06, 0xe3, 0x34, 0xbe, 0x8e, 0x96, 0xec, 0x80, 0x6c, 0x32, 0x01, 0x48, 0xa3, 0xe4,
	0x3a, 0xa6, 0xf3, 0x34, 0x5a, 0xba, 0xfd, 0xc5, 0x19, 0xc8, 0xcd, 0x0e, 0x0f, 0xdd, 0x42, 0xd9,
	0x2d, 0xe4, 0x75, 0x1e, 0xaa, 0x6e, 0x77, 0x7d, 0xb5, 0xfd, 0x1f, 0xfe, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x73, 0x4f, 0x24, 0x55, 0x0e, 0x03, 0x00, 0x00,
}
