// Code generated by protoc-gen-go.
// source: Trace.proto
// DO NOT EDIT!

package org_glowroot_wire_api_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Trace struct {
	Id     string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Header *Trace_Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	// entry ordering is pre-order depth-first
	// there are typically multiple "root" nodes (with depth=0)
	Entry             []*Trace_Entry `protobuf:"bytes,3,rep,name=entry" json:"entry,omitempty"`
	MainThreadProfile *Profile       `protobuf:"bytes,4,opt,name=main_thread_profile,json=mainThreadProfile" json:"main_thread_profile,omitempty"`
	AuxThreadProfile  *Profile       `protobuf:"bytes,5,opt,name=aux_thread_profile,json=auxThreadProfile" json:"aux_thread_profile,omitempty"`
	Update            bool           `protobuf:"varint,6,opt,name=update" json:"update,omitempty"`
	// trace in common case where this is not an update
	SharedQueryText []*Trace_SharedQueryText `protobuf:"bytes,8,rep,name=shared_query_text,json=sharedQueryText" json:"shared_query_text,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Trace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trace) GetHeader() *Trace_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Trace) GetEntry() []*Trace_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *Trace) GetMainThreadProfile() *Profile {
	if m != nil {
		return m.MainThreadProfile
	}
	return nil
}

func (m *Trace) GetAuxThreadProfile() *Profile {
	if m != nil {
		return m.AuxThreadProfile
	}
	return nil
}

func (m *Trace) GetUpdate() bool {
	if m != nil {
		return m.Update
	}
	return false
}

func (m *Trace) GetSharedQueryText() []*Trace_SharedQueryText {
	if m != nil {
		return m.SharedQueryText
	}
	return nil
}

type Trace_Header struct {
	Partial                              bool                 `protobuf:"varint,1,opt,name=partial" json:"partial,omitempty"`
	Slow                                 bool                 `protobuf:"varint,2,opt,name=slow" json:"slow,omitempty"`
	Async                                bool                 `protobuf:"varint,3,opt,name=async" json:"async,omitempty"`
	StartTime                            int64                `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CaptureTime                          int64                `protobuf:"varint,5,opt,name=capture_time,json=captureTime" json:"capture_time,omitempty"`
	DurationNanos                        int64                `protobuf:"varint,6,opt,name=duration_nanos,json=durationNanos" json:"duration_nanos,omitempty"`
	TransactionType                      string               `protobuf:"bytes,7,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
	TransactionName                      string               `protobuf:"bytes,8,opt,name=transaction_name,json=transactionName" json:"transaction_name,omitempty"`
	Headline                             string               `protobuf:"bytes,9,opt,name=headline" json:"headline,omitempty"`
	User                                 string               `protobuf:"bytes,10,opt,name=user" json:"user,omitempty"`
	Attribute                            []*Trace_Attribute   `protobuf:"bytes,11,rep,name=attribute" json:"attribute,omitempty"`
	DetailEntry                          []*Trace_DetailEntry `protobuf:"bytes,12,rep,name=detail_entry,json=detailEntry" json:"detail_entry,omitempty"`
	Error                                *Trace_Error         `protobuf:"bytes,13,opt,name=error" json:"error,omitempty"`
	MainThreadRootTimer                  *Trace_Timer         `protobuf:"bytes,14,opt,name=main_thread_root_timer,json=mainThreadRootTimer" json:"main_thread_root_timer,omitempty"`
	AuxThreadRootTimer                   []*Trace_Timer       `protobuf:"bytes,15,rep,name=aux_thread_root_timer,json=auxThreadRootTimer" json:"aux_thread_root_timer,omitempty"`
	AsyncTimer                           []*Trace_Timer       `protobuf:"bytes,16,rep,name=async_timer,json=asyncTimer" json:"async_timer,omitempty"`
	MainThreadStats                      *Trace_ThreadStats   `protobuf:"bytes,17,opt,name=main_thread_stats,json=mainThreadStats" json:"main_thread_stats,omitempty"`
	AuxThreadStats                       *Trace_ThreadStats   `protobuf:"bytes,18,opt,name=aux_thread_stats,json=auxThreadStats" json:"aux_thread_stats,omitempty"`
	EntryCount                           int32                `protobuf:"varint,19,opt,name=entry_count,json=entryCount" json:"entry_count,omitempty"`
	EntryLimitExceeded                   bool                 `protobuf:"varint,20,opt,name=entry_limit_exceeded,json=entryLimitExceeded" json:"entry_limit_exceeded,omitempty"`
	MainThreadProfileSampleCount         int64                `protobuf:"varint,21,opt,name=main_thread_profile_sample_count,json=mainThreadProfileSampleCount" json:"main_thread_profile_sample_count,omitempty"`
	MainThreadProfileSampleLimitExceeded bool                 `protobuf:"varint,22,opt,name=main_thread_profile_sample_limit_exceeded,json=mainThreadProfileSampleLimitExceeded" json:"main_thread_profile_sample_limit_exceeded,omitempty"`
	AuxThreadProfileSampleCount          int64                `protobuf:"varint,23,opt,name=aux_thread_profile_sample_count,json=auxThreadProfileSampleCount" json:"aux_thread_profile_sample_count,omitempty"`
	AuxThreadProfileSampleLimitExceeded  bool                 `protobuf:"varint,24,opt,name=aux_thread_profile_sample_limit_exceeded,json=auxThreadProfileSampleLimitExceeded" json:"aux_thread_profile_sample_limit_exceeded,omitempty"`
}

func (m *Trace_Header) Reset()                    { *m = Trace_Header{} }
func (m *Trace_Header) String() string            { return proto.CompactTextString(m) }
func (*Trace_Header) ProtoMessage()               {}
func (*Trace_Header) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

func (m *Trace_Header) GetPartial() bool {
	if m != nil {
		return m.Partial
	}
	return false
}

func (m *Trace_Header) GetSlow() bool {
	if m != nil {
		return m.Slow
	}
	return false
}

func (m *Trace_Header) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

func (m *Trace_Header) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Trace_Header) GetCaptureTime() int64 {
	if m != nil {
		return m.CaptureTime
	}
	return 0
}

func (m *Trace_Header) GetDurationNanos() int64 {
	if m != nil {
		return m.DurationNanos
	}
	return 0
}

func (m *Trace_Header) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *Trace_Header) GetTransactionName() string {
	if m != nil {
		return m.TransactionName
	}
	return ""
}

func (m *Trace_Header) GetHeadline() string {
	if m != nil {
		return m.Headline
	}
	return ""
}

func (m *Trace_Header) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Trace_Header) GetAttribute() []*Trace_Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *Trace_Header) GetDetailEntry() []*Trace_DetailEntry {
	if m != nil {
		return m.DetailEntry
	}
	return nil
}

func (m *Trace_Header) GetError() *Trace_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Trace_Header) GetMainThreadRootTimer() *Trace_Timer {
	if m != nil {
		return m.MainThreadRootTimer
	}
	return nil
}

func (m *Trace_Header) GetAuxThreadRootTimer() []*Trace_Timer {
	if m != nil {
		return m.AuxThreadRootTimer
	}
	return nil
}

func (m *Trace_Header) GetAsyncTimer() []*Trace_Timer {
	if m != nil {
		return m.AsyncTimer
	}
	return nil
}

func (m *Trace_Header) GetMainThreadStats() *Trace_ThreadStats {
	if m != nil {
		return m.MainThreadStats
	}
	return nil
}

func (m *Trace_Header) GetAuxThreadStats() *Trace_ThreadStats {
	if m != nil {
		return m.AuxThreadStats
	}
	return nil
}

func (m *Trace_Header) GetEntryCount() int32 {
	if m != nil {
		return m.EntryCount
	}
	return 0
}

func (m *Trace_Header) GetEntryLimitExceeded() bool {
	if m != nil {
		return m.EntryLimitExceeded
	}
	return false
}

func (m *Trace_Header) GetMainThreadProfileSampleCount() int64 {
	if m != nil {
		return m.MainThreadProfileSampleCount
	}
	return 0
}

func (m *Trace_Header) GetMainThreadProfileSampleLimitExceeded() bool {
	if m != nil {
		return m.MainThreadProfileSampleLimitExceeded
	}
	return false
}

func (m *Trace_Header) GetAuxThreadProfileSampleCount() int64 {
	if m != nil {
		return m.AuxThreadProfileSampleCount
	}
	return 0
}

func (m *Trace_Header) GetAuxThreadProfileSampleLimitExceeded() bool {
	if m != nil {
		return m.AuxThreadProfileSampleLimitExceeded
	}
	return false
}

type Trace_Attribute struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (m *Trace_Attribute) Reset()                    { *m = Trace_Attribute{} }
func (m *Trace_Attribute) String() string            { return proto.CompactTextString(m) }
func (*Trace_Attribute) ProtoMessage()               {}
func (*Trace_Attribute) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 1} }

func (m *Trace_Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trace_Attribute) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type Trace_DetailEntry struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// one of these two (or neither for an empty value)
	Value      []*Trace_DetailValue `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	ChildEntry []*Trace_DetailEntry `protobuf:"bytes,3,rep,name=child_entry,json=childEntry" json:"child_entry,omitempty"`
}

func (m *Trace_DetailEntry) Reset()                    { *m = Trace_DetailEntry{} }
func (m *Trace_DetailEntry) String() string            { return proto.CompactTextString(m) }
func (*Trace_DetailEntry) ProtoMessage()               {}
func (*Trace_DetailEntry) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 2} }

func (m *Trace_DetailEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trace_DetailEntry) GetValue() []*Trace_DetailValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Trace_DetailEntry) GetChildEntry() []*Trace_DetailEntry {
	if m != nil {
		return m.ChildEntry
	}
	return nil
}

type Trace_DetailValue struct {
	// Types that are valid to be assigned to Val:
	//	*Trace_DetailValue_String_
	//	*Trace_DetailValue_Double
	//	*Trace_DetailValue_Long
	//	*Trace_DetailValue_Boolean
	Val isTrace_DetailValue_Val `protobuf_oneof:"val"`
}

func (m *Trace_DetailValue) Reset()                    { *m = Trace_DetailValue{} }
func (m *Trace_DetailValue) String() string            { return proto.CompactTextString(m) }
func (*Trace_DetailValue) ProtoMessage()               {}
func (*Trace_DetailValue) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 3} }

type isTrace_DetailValue_Val interface {
	isTrace_DetailValue_Val()
}

type Trace_DetailValue_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,oneof"`
}
type Trace_DetailValue_Double struct {
	Double float64 `protobuf:"fixed64,2,opt,name=double,oneof"`
}
type Trace_DetailValue_Long struct {
	Long int64 `protobuf:"varint,3,opt,name=long,oneof"`
}
type Trace_DetailValue_Boolean struct {
	Boolean bool `protobuf:"varint,4,opt,name=boolean,oneof"`
}

func (*Trace_DetailValue_String_) isTrace_DetailValue_Val() {}
func (*Trace_DetailValue_Double) isTrace_DetailValue_Val()  {}
func (*Trace_DetailValue_Long) isTrace_DetailValue_Val()    {}
func (*Trace_DetailValue_Boolean) isTrace_DetailValue_Val() {}

func (m *Trace_DetailValue) GetVal() isTrace_DetailValue_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Trace_DetailValue) GetString_() string {
	if x, ok := m.GetVal().(*Trace_DetailValue_String_); ok {
		return x.String_
	}
	return ""
}

func (m *Trace_DetailValue) GetDouble() float64 {
	if x, ok := m.GetVal().(*Trace_DetailValue_Double); ok {
		return x.Double
	}
	return 0
}

func (m *Trace_DetailValue) GetLong() int64 {
	if x, ok := m.GetVal().(*Trace_DetailValue_Long); ok {
		return x.Long
	}
	return 0
}

func (m *Trace_DetailValue) GetBoolean() bool {
	if x, ok := m.GetVal().(*Trace_DetailValue_Boolean); ok {
		return x.Boolean
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Trace_DetailValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Trace_DetailValue_OneofMarshaler, _Trace_DetailValue_OneofUnmarshaler, _Trace_DetailValue_OneofSizer, []interface{}{
		(*Trace_DetailValue_String_)(nil),
		(*Trace_DetailValue_Double)(nil),
		(*Trace_DetailValue_Long)(nil),
		(*Trace_DetailValue_Boolean)(nil),
	}
}

func _Trace_DetailValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Trace_DetailValue)
	// val
	switch x := m.Val.(type) {
	case *Trace_DetailValue_String_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case *Trace_DetailValue_Double:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Double))
	case *Trace_DetailValue_Long:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Long))
	case *Trace_DetailValue_Boolean:
		t := uint64(0)
		if x.Boolean {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Trace_DetailValue.Val has unexpected type %T", x)
	}
	return nil
}

func _Trace_DetailValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Trace_DetailValue)
	switch tag {
	case 1: // val.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Val = &Trace_DetailValue_String_{x}
		return true, err
	case 2: // val.double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Val = &Trace_DetailValue_Double{math.Float64frombits(x)}
		return true, err
	case 3: // val.long
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Trace_DetailValue_Long{int64(x)}
		return true, err
	case 4: // val.boolean
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &Trace_DetailValue_Boolean{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Trace_DetailValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Trace_DetailValue)
	// val
	switch x := m.Val.(type) {
	case *Trace_DetailValue_String_:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *Trace_DetailValue_Double:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Trace_DetailValue_Long:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Long))
	case *Trace_DetailValue_Boolean:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Trace_Error struct {
	Message   string     `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Exception *Throwable `protobuf:"bytes,2,opt,name=exception" json:"exception,omitempty"`
}

func (m *Trace_Error) Reset()                    { *m = Trace_Error{} }
func (m *Trace_Error) String() string            { return proto.CompactTextString(m) }
func (*Trace_Error) ProtoMessage()               {}
func (*Trace_Error) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 4} }

func (m *Trace_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Trace_Error) GetException() *Throwable {
	if m != nil {
		return m.Exception
	}
	return nil
}

type Trace_Timer struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Extended   bool   `protobuf:"varint,2,opt,name=extended" json:"extended,omitempty"`
	TotalNanos int64  `protobuf:"varint,3,opt,name=total_nanos,json=totalNanos" json:"total_nanos,omitempty"`
	Count      int64  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	// whether timer was active at the time of a partial trace capture
	Active     bool           `protobuf:"varint,5,opt,name=active" json:"active,omitempty"`
	ChildTimer []*Trace_Timer `protobuf:"bytes,6,rep,name=child_timer,json=childTimer" json:"child_timer,omitempty"`
}

func (m *Trace_Timer) Reset()                    { *m = Trace_Timer{} }
func (m *Trace_Timer) String() string            { return proto.CompactTextString(m) }
func (*Trace_Timer) ProtoMessage()               {}
func (*Trace_Timer) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 5} }

func (m *Trace_Timer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trace_Timer) GetExtended() bool {
	if m != nil {
		return m.Extended
	}
	return false
}

func (m *Trace_Timer) GetTotalNanos() int64 {
	if m != nil {
		return m.TotalNanos
	}
	return 0
}

func (m *Trace_Timer) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Trace_Timer) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Trace_Timer) GetChildTimer() []*Trace_Timer {
	if m != nil {
		return m.ChildTimer
	}
	return nil
}

type Trace_ThreadStats struct {
	TotalCpuNanos       *OptionalInt64 `protobuf:"bytes,1,opt,name=total_cpu_nanos,json=totalCpuNanos" json:"total_cpu_nanos,omitempty"`
	TotalBlockedNanos   *OptionalInt64 `protobuf:"bytes,2,opt,name=total_blocked_nanos,json=totalBlockedNanos" json:"total_blocked_nanos,omitempty"`
	TotalWaitedNanos    *OptionalInt64 `protobuf:"bytes,3,opt,name=total_waited_nanos,json=totalWaitedNanos" json:"total_waited_nanos,omitempty"`
	TotalAllocatedBytes *OptionalInt64 `protobuf:"bytes,4,opt,name=total_allocated_bytes,json=totalAllocatedBytes" json:"total_allocated_bytes,omitempty"`
}

func (m *Trace_ThreadStats) Reset()                    { *m = Trace_ThreadStats{} }
func (m *Trace_ThreadStats) String() string            { return proto.CompactTextString(m) }
func (*Trace_ThreadStats) ProtoMessage()               {}
func (*Trace_ThreadStats) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 6} }

func (m *Trace_ThreadStats) GetTotalCpuNanos() *OptionalInt64 {
	if m != nil {
		return m.TotalCpuNanos
	}
	return nil
}

func (m *Trace_ThreadStats) GetTotalBlockedNanos() *OptionalInt64 {
	if m != nil {
		return m.TotalBlockedNanos
	}
	return nil
}

func (m *Trace_ThreadStats) GetTotalWaitedNanos() *OptionalInt64 {
	if m != nil {
		return m.TotalWaitedNanos
	}
	return nil
}

func (m *Trace_ThreadStats) GetTotalAllocatedBytes() *OptionalInt64 {
	if m != nil {
		return m.TotalAllocatedBytes
	}
	return nil
}

type Trace_Entry struct {
	Depth int32 `protobuf:"varint,1,opt,name=depth" json:"depth,omitempty"`
	// start time relative to trace start
	StartOffsetNanos int64 `protobuf:"varint,2,opt,name=start_offset_nanos,json=startOffsetNanos" json:"start_offset_nanos,omitempty"`
	DurationNanos    int64 `protobuf:"varint,3,opt,name=duration_nanos,json=durationNanos" json:"duration_nanos,omitempty"`
	// whether entry was active at the time of a partial trace capture
	Active bool `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	// message is empty for trace entries added using addErrorEntry()
	Message                   string                   `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	QueryEntryMessage         *Trace_QueryEntryMessage `protobuf:"bytes,9,opt,name=query_entry_message,json=queryEntryMessage" json:"query_entry_message,omitempty"`
	DetailEntry               []*Trace_DetailEntry     `protobuf:"bytes,6,rep,name=detail_entry,json=detailEntry" json:"detail_entry,omitempty"`
	LocationStackTraceElement []*StackTraceElement     `protobuf:"bytes,7,rep,name=location_stack_trace_element,json=locationStackTraceElement" json:"location_stack_trace_element,omitempty"`
	Error                     *Trace_Error             `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
}

func (m *Trace_Entry) Reset()                    { *m = Trace_Entry{} }
func (m *Trace_Entry) String() string            { return proto.CompactTextString(m) }
func (*Trace_Entry) ProtoMessage()               {}
func (*Trace_Entry) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 7} }

func (m *Trace_Entry) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Trace_Entry) GetStartOffsetNanos() int64 {
	if m != nil {
		return m.StartOffsetNanos
	}
	return 0
}

func (m *Trace_Entry) GetDurationNanos() int64 {
	if m != nil {
		return m.DurationNanos
	}
	return 0
}

func (m *Trace_Entry) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Trace_Entry) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Trace_Entry) GetQueryEntryMessage() *Trace_QueryEntryMessage {
	if m != nil {
		return m.QueryEntryMessage
	}
	return nil
}

func (m *Trace_Entry) GetDetailEntry() []*Trace_DetailEntry {
	if m != nil {
		return m.DetailEntry
	}
	return nil
}

func (m *Trace_Entry) GetLocationStackTraceElement() []*StackTraceElement {
	if m != nil {
		return m.LocationStackTraceElement
	}
	return nil
}

func (m *Trace_Entry) GetError() *Trace_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Trace_QueryEntryMessage struct {
	SharedQueryTextIndex int32  `protobuf:"varint,1,opt,name=shared_query_text_index,json=sharedQueryTextIndex" json:"shared_query_text_index,omitempty"`
	Prefix               string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	Suffix               string `protobuf:"bytes,3,opt,name=suffix" json:"suffix,omitempty"`
}

func (m *Trace_QueryEntryMessage) Reset()                    { *m = Trace_QueryEntryMessage{} }
func (m *Trace_QueryEntryMessage) String() string            { return proto.CompactTextString(m) }
func (*Trace_QueryEntryMessage) ProtoMessage()               {}
func (*Trace_QueryEntryMessage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 8} }

func (m *Trace_QueryEntryMessage) GetSharedQueryTextIndex() int32 {
	if m != nil {
		return m.SharedQueryTextIndex
	}
	return 0
}

func (m *Trace_QueryEntryMessage) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Trace_QueryEntryMessage) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

type Trace_SharedQueryText struct {
	FullText      string `protobuf:"bytes,1,opt,name=full_text,json=fullText" json:"full_text,omitempty"`
	TruncatedText string `protobuf:"bytes,2,opt,name=truncated_text,json=truncatedText" json:"truncated_text,omitempty"`
	// (truncated to 120 characters)
	TruncatedEndText string `protobuf:"bytes,3,opt,name=truncated_end_text,json=truncatedEndText" json:"truncated_end_text,omitempty"`
	// (truncated to 120 characters)
	FullTextSha1 string `protobuf:"bytes,4,opt,name=full_text_sha1,json=fullTextSha1" json:"full_text_sha1,omitempty"`
}

func (m *Trace_SharedQueryText) Reset()                    { *m = Trace_SharedQueryText{} }
func (m *Trace_SharedQueryText) String() string            { return proto.CompactTextString(m) }
func (*Trace_SharedQueryText) ProtoMessage()               {}
func (*Trace_SharedQueryText) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 9} }

func (m *Trace_SharedQueryText) GetFullText() string {
	if m != nil {
		return m.FullText
	}
	return ""
}

func (m *Trace_SharedQueryText) GetTruncatedText() string {
	if m != nil {
		return m.TruncatedText
	}
	return ""
}

func (m *Trace_SharedQueryText) GetTruncatedEndText() string {
	if m != nil {
		return m.TruncatedEndText
	}
	return ""
}

func (m *Trace_SharedQueryText) GetFullTextSha1() string {
	if m != nil {
		return m.FullTextSha1
	}
	return ""
}

func init() {
	proto.RegisterType((*Trace)(nil), "org_glowroot_wire_api_model.Trace")
	proto.RegisterType((*Trace_Header)(nil), "org_glowroot_wire_api_model.Trace.Header")
	proto.RegisterType((*Trace_Attribute)(nil), "org_glowroot_wire_api_model.Trace.Attribute")
	proto.RegisterType((*Trace_DetailEntry)(nil), "org_glowroot_wire_api_model.Trace.DetailEntry")
	proto.RegisterType((*Trace_DetailValue)(nil), "org_glowroot_wire_api_model.Trace.DetailValue")
	proto.RegisterType((*Trace_Error)(nil), "org_glowroot_wire_api_model.Trace.Error")
	proto.RegisterType((*Trace_Timer)(nil), "org_glowroot_wire_api_model.Trace.Timer")
	proto.RegisterType((*Trace_ThreadStats)(nil), "org_glowroot_wire_api_model.Trace.ThreadStats")
	proto.RegisterType((*Trace_Entry)(nil), "org_glowroot_wire_api_model.Trace.Entry")
	proto.RegisterType((*Trace_QueryEntryMessage)(nil), "org_glowroot_wire_api_model.Trace.QueryEntryMessage")
	proto.RegisterType((*Trace_SharedQueryText)(nil), "org_glowroot_wire_api_model.Trace.SharedQueryText")
}

func init() { proto.RegisterFile("Trace.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0xef, 0x72, 0xd3, 0x46,
	0x10, 0xc7, 0x71, 0xe4, 0xd8, 0xeb, 0xfc, 0xf3, 0xc5, 0x80, 0x2a, 0x60, 0x70, 0x5b, 0xe8, 0x98,
	0x0e, 0xe3, 0x29, 0x14, 0xfa, 0xb1, 0x33, 0x84, 0xa4, 0x13, 0x3a, 0x2d, 0x94, 0x4b, 0x5a, 0x18,
	0x3a, 0x45, 0x73, 0xb6, 0x2e, 0xb1, 0x06, 0x59, 0x27, 0x4e, 0x27, 0xe2, 0xf0, 0xbd, 0x5f, 0xfb,
	0x1e, 0x7d, 0x83, 0xbe, 0x46, 0xdf, 0xa2, 0x6f, 0xd0, 0xaf, 0x9d, 0xdb, 0x95, 0x6d, 0xd9, 0x0e,
	0x19, 0x9b, 0x7e, 0xd3, 0xee, 0xed, 0xfe, 0x6e, 0x6f, 0xff, 0x0b, 0xea, 0x47, 0x5a, 0xf4, 0x64,
	0x27, 0xd1, 0xca, 0x28, 0x76, 0x4d, 0xe9, 0x13, 0xff, 0x24, 0x52, 0xa7, 0x5a, 0x29, 0xe3, 0x9f,
	0x86, 0x5a, 0xfa, 0x22, 0x09, 0xfd, 0x81, 0x0a, 0x64, 0xe4, 0x6d, 0xfc, 0xa4, 0xd5, 0x71, 0x18,
	0xe5, 0xb2, 0xde, 0xfa, 0x63, 0x35, 0x18, 0xa8, 0x98, 0xa8, 0xcf, 0x7e, 0xbf, 0x01, 0x0e, 0x22,
	0xb1, 0x4d, 0x58, 0x09, 0x03, 0xb7, 0xd4, 0x2a, 0xb5, 0x6b, 0x7c, 0x25, 0x0c, 0xd8, 0x23, 0xa8,
	0xf4, 0xa5, 0x08, 0xa4, 0x76, 0x57, 0x5a, 0xa5, 0x76, 0xfd, 0xfe, 0x9d, 0xce, 0x05, 0x97, 0x74,
	0xc8, 0x9a, 0x03, 0x54, 0xe0, 0xb9, 0x22, 0xfb, 0x16, 0x1c, 0x19, 0x1b, 0x7d, 0xe6, 0x96, 0x5b,
	0xe5, 0x76, 0xfd, 0x7e, 0x7b, 0x01, 0x84, 0x7d, 0x2b, 0xcf, 0x49, 0x8d, 0x1d, 0xc1, 0xce, 0x40,
	0x84, 0xb1, 0x6f, 0xfa, 0x5a, 0x8a, 0xc0, 0x4f, 0xe8, 0x1d, 0xee, 0x2a, 0xda, 0x73, 0xeb, 0x42,
	0xb4, 0xfc, 0xcd, 0xbc, 0x61, 0x01, 0x8e, 0x50, 0x3f, 0x67, 0x31, 0x0e, 0x4c, 0x64, 0xc3, 0x59,
	0x50, 0x67, 0x09, 0xd0, 0x6d, 0x91, 0x0d, 0xa7, 0x31, 0xaf, 0x40, 0x25, 0x4b, 0x02, 0x61, 0xa4,
	0x5b, 0x69, 0x95, 0xda, 0x55, 0x9e, 0x53, 0xec, 0x35, 0x34, 0xd2, 0xbe, 0xd0, 0x32, 0xf0, 0xdf,
	0x66, 0x52, 0x9f, 0xf9, 0x46, 0x0e, 0x8d, 0x5b, 0x45, 0x6f, 0xdc, 0x5f, 0xc0, 0x1b, 0x87, 0xa8,
	0xfb, 0xdc, 0xaa, 0x1e, 0xc9, 0xa1, 0xe1, 0x5b, 0xe9, 0x34, 0xc3, 0xfb, 0x07, 0xa0, 0x42, 0x4e,
	0x67, 0x2e, 0xac, 0x25, 0x42, 0x9b, 0x50, 0x44, 0x18, 0xc4, 0x2a, 0x1f, 0x91, 0x8c, 0xc1, 0x6a,
	0x1a, 0xa9, 0x53, 0x8c, 0x63, 0x95, 0xe3, 0x37, 0x6b, 0x82, 0x23, 0xd2, 0xb3, 0xb8, 0xe7, 0x96,
	0x91, 0x49, 0x04, 0xbb, 0x01, 0x90, 0x1a, 0xa1, 0x8d, 0x6f, 0xc2, 0x01, 0xf9, 0xb9, 0xcc, 0x6b,
	0xc8, 0x39, 0x0a, 0x07, 0x92, 0x7d, 0x0a, 0xeb, 0x3d, 0x91, 0x98, 0x4c, 0x4b, 0x12, 0x70, 0x50,
	0xa0, 0x9e, 0xf3, 0x50, 0xe4, 0x36, 0x6c, 0x06, 0x99, 0x16, 0x26, 0x54, 0xb1, 0x1f, 0x8b, 0x58,
	0xa5, 0xe8, 0x90, 0x32, 0xdf, 0x18, 0x71, 0x9f, 0x5a, 0x26, 0xbb, 0x03, 0xdb, 0x46, 0x8b, 0x38,
	0x15, 0x3d, 0x94, 0x34, 0x67, 0x89, 0x74, 0xd7, 0x30, 0xf5, 0xb6, 0x0a, 0xfc, 0xa3, 0xb3, 0x44,
	0xce, 0x8a, 0xc6, 0x62, 0x20, 0xdd, 0xea, 0x9c, 0xe8, 0x53, 0x31, 0x90, 0xcc, 0x83, 0xaa, 0xcd,
	0xbc, 0x28, 0x8c, 0xa5, 0x5b, 0x43, 0x91, 0x31, 0x6d, 0x9d, 0x90, 0xa5, 0x52, 0xbb, 0x80, 0x7c,
	0xfc, 0x66, 0xdf, 0x43, 0x4d, 0x18, 0xa3, 0xc3, 0x6e, 0x66, 0xa4, 0x5b, 0xc7, 0xa8, 0xdc, 0x5d,
	0x20, 0x2a, 0x8f, 0x46, 0x3a, 0x7c, 0xa2, 0xce, 0x9e, 0xc3, 0x7a, 0x20, 0x8d, 0x08, 0x23, 0x9f,
	0x52, 0x7e, 0x1d, 0xe1, 0x3a, 0x0b, 0xc0, 0xed, 0xa1, 0x1a, 0x25, 0x7e, 0x3d, 0x98, 0x10, 0x58,
	0x3e, 0x5a, 0x2b, 0xed, 0x6e, 0x60, 0x6e, 0x2e, 0x54, 0x3e, 0x56, 0x9e, 0x93, 0x1a, 0xfb, 0x0d,
	0xae, 0x14, 0xcb, 0x07, 0xb5, 0x6c, 0xdc, 0xb4, 0xbb, 0xb9, 0x30, 0xa0, 0x0d, 0xaa, 0xe6, 0x3b,
	0x93, 0x2a, 0xe2, 0x4a, 0x61, 0x32, 0x68, 0xf6, 0x2b, 0x5c, 0x2e, 0xd4, 0x51, 0x01, 0x7d, 0x6b,
	0xe1, 0x6a, 0x27, 0x74, 0x36, 0x2e, 0xa7, 0x09, 0xf8, 0x13, 0xa8, 0x63, 0x4a, 0xe6, 0x90, 0xdb,
	0x4b, 0x42, 0x02, 0x2a, 0x13, 0xd4, 0x2b, 0x68, 0x14, 0xdd, 0x90, 0x1a, 0x61, 0x52, 0xb7, 0x81,
	0x1e, 0x58, 0x24, 0x3c, 0x64, 0xd9, 0xa1, 0xd5, 0xe2, 0x5b, 0x13, 0x3f, 0x20, 0x83, 0xbd, 0x84,
	0xed, 0x82, 0x0f, 0x08, 0x9a, 0x7d, 0x14, 0xf4, 0xe6, 0xd8, 0x09, 0x84, 0x7c, 0x13, 0xea, 0x98,
	0x48, 0x7e, 0x4f, 0x65, 0xb1, 0x71, 0x77, 0x5a, 0xa5, 0xb6, 0xc3, 0x01, 0x59, 0x8f, 0x2d, 0x87,
	0x7d, 0x05, 0x4d, 0x12, 0x88, 0xc2, 0x41, 0x68, 0x7c, 0x39, 0xec, 0x49, 0x19, 0xc8, 0xc0, 0x6d,
	0x62, 0x41, 0x33, 0x3c, 0xfb, 0xc1, 0x1e, 0xed, 0xe7, 0x27, 0xec, 0x3b, 0x68, 0x9d, 0xd3, 0x4e,
	0xfd, 0x54, 0x0c, 0x92, 0x48, 0xe6, 0xf7, 0x5c, 0xc6, 0x6a, 0xbd, 0x3e, 0xd7, 0x35, 0x0f, 0x51,
	0x88, 0x6e, 0x7e, 0x01, 0x77, 0x2e, 0xc0, 0x99, 0x31, 0xe7, 0x0a, 0x9a, 0x73, 0xeb, 0x03, 0x80,
	0xd3, 0x06, 0xee, 0xc1, 0xcd, 0xf9, 0xce, 0x3c, 0x6d, 0xdf, 0x55, 0xb4, 0xef, 0xda, 0x6c, 0x03,
	0x2e, 0x9a, 0xf7, 0x33, 0xb4, 0x3f, 0x8c, 0x32, 0x63, 0x9d, 0x8b, 0xd6, 0x7d, 0x7e, 0x3e, 0xdc,
	0x94, 0x71, 0xde, 0x43, 0xa8, 0x8d, 0x0b, 0xdf, 0x76, 0x13, 0x6c, 0x44, 0x34, 0x2e, 0xf1, 0xdb,
	0xb6, 0xd4, 0x77, 0x22, 0xca, 0xa4, 0xbb, 0xd2, 0x2a, 0xb7, 0x6b, 0x9c, 0x08, 0xef, 0xaf, 0x12,
	0xd4, 0x0b, 0x15, 0x7e, 0xae, 0xe6, 0x5e, 0x51, 0x73, 0x99, 0xa6, 0xf1, 0x8b, 0xd5, 0xca, 0x6f,
	0x62, 0xcf, 0xa0, 0xde, 0xeb, 0x87, 0x51, 0xe0, 0x17, 0x67, 0xee, 0xb2, 0x0d, 0x08, 0x10, 0x02,
	0xbf, 0xbd, 0xf7, 0x23, 0xcb, 0xf1, 0x1a, 0xe6, 0x42, 0x25, 0x35, 0x3a, 0x8c, 0x4f, 0xc8, 0xf6,
	0x83, 0x4b, 0x3c, 0xa7, 0xed, 0x49, 0xa0, 0xb2, 0x6e, 0x24, 0x71, 0xc4, 0x94, 0xec, 0x09, 0xd1,
	0xac, 0x09, 0xab, 0x91, 0x8a, 0x4f, 0x70, 0xca, 0x94, 0x0f, 0x2e, 0x71, 0xa4, 0x98, 0x07, 0x6b,
	0x5d, 0xa5, 0x22, 0x29, 0x62, 0x9c, 0x31, 0xd5, 0x83, 0x4b, 0x7c, 0xc4, 0xd8, 0x75, 0xa0, 0xfc,
	0x4e, 0x44, 0xde, 0x09, 0x38, 0xd8, 0xcb, 0xec, 0x58, 0x1b, 0xc8, 0x34, 0x15, 0x27, 0x23, 0x97,
	0x8d, 0x48, 0xb6, 0x07, 0x35, 0x1b, 0xc7, 0xc4, 0xb6, 0xff, 0x7c, 0x47, 0xf9, 0xe2, 0xe2, 0xd7,
	0xf6, 0xb5, 0x3a, 0x15, 0xdd, 0x48, 0xf2, 0x89, 0xa2, 0xf7, 0x77, 0x09, 0x1c, 0xea, 0x13, 0xe7,
	0x45, 0xc6, 0x83, 0xaa, 0x1c, 0x1a, 0x19, 0xdb, 0x5c, 0xa1, 0xf1, 0x39, 0xa6, 0x6d, 0x85, 0x1a,
	0x65, 0x44, 0x94, 0xcf, 0x39, 0x7c, 0x22, 0x07, 0x64, 0xd1, 0x90, 0x6b, 0x82, 0x43, 0x49, 0x4b,
	0x83, 0x94, 0x08, 0xbb, 0x2a, 0xd8, 0x91, 0xf5, 0x8e, 0xc6, 0x67, 0x95, 0xe7, 0x94, 0xed, 0x78,
	0x14, 0x3e, 0xea, 0x78, 0x95, 0x65, 0x3b, 0x1e, 0x2a, 0xe3, 0xb7, 0xf7, 0xef, 0x0a, 0xd4, 0x8b,
	0xbd, 0x84, 0xc3, 0x16, 0x59, 0xda, 0x4b, 0xb2, 0xdc, 0xda, 0x12, 0xfa, 0xeb, 0xcb, 0x0b, 0xe1,
	0x9f, 0xa1, 0x87, 0x44, 0xf4, 0x24, 0x36, 0xdf, 0x3c, 0xe0, 0x1b, 0x08, 0xf1, 0x38, 0xc9, 0xe8,
	0x71, 0xaf, 0x60, 0x87, 0x30, 0xbb, 0x91, 0xea, 0xbd, 0x91, 0x41, 0x8e, 0xbb, 0xb2, 0x34, 0x6e,
	0x03, 0x61, 0x76, 0x09, 0x85, 0xb0, 0x5f, 0x02, 0x23, 0xec, 0x53, 0x11, 0x9a, 0x31, 0x74, 0x79,
	0x69, 0xe8, 0x6d, 0x44, 0x79, 0x81, 0x20, 0x84, 0xfc, 0x1a, 0x2e, 0x13, 0xb2, 0x88, 0x22, 0xd5,
	0x13, 0x16, 0xbc, 0x7b, 0x66, 0x64, 0x9a, 0xef, 0x94, 0xcb, 0x80, 0xd3, 0xf3, 0x1f, 0x8d, 0x70,
	0x76, 0x2d, 0x8c, 0xf7, 0xc7, 0x2a, 0x38, 0x54, 0xe7, 0x4d, 0x70, 0x02, 0x99, 0x98, 0x3e, 0x7a,
	0xda, 0xe1, 0x44, 0xb0, 0xbb, 0xc0, 0x68, 0xc1, 0x52, 0xc7, 0xc7, 0xa9, 0x34, 0x05, 0xa7, 0x95,
	0xf9, 0x36, 0x9e, 0x3c, 0xc3, 0x03, 0xb2, 0x76, 0x7e, 0x99, 0x2a, 0x9f, 0xb7, 0x4c, 0x4d, 0x32,
	0x6a, 0x75, 0x2a, 0xa3, 0x0a, 0xa5, 0xe3, 0x4c, 0x97, 0x4e, 0x00, 0x3b, 0xb4, 0x8f, 0xd2, 0x04,
	0x19, 0x49, 0xd5, 0xd0, 0x09, 0x0f, 0x16, 0xc8, 0x39, 0xdc, 0x40, 0xf1, 0xa1, 0x3f, 0x92, 0x2e,
	0x6f, 0xbc, 0x9d, 0x65, 0xcd, 0xad, 0x44, 0x95, 0xff, 0xbf, 0x12, 0x29, 0xb8, 0x8e, 0xfe, 0xb6,
	0x1e, 0x49, 0x8d, 0xe8, 0xbd, 0xf1, 0x8d, 0x55, 0xf0, 0x65, 0x24, 0x07, 0x32, 0x36, 0xee, 0xda,
	0x02, 0x57, 0x1c, 0x5a, 0x3d, 0xbc, 0x67, 0x9f, 0xb4, 0xf8, 0x27, 0x23, 0xcc, 0xb9, 0xa3, 0xc9,
	0x0e, 0x56, 0xfd, 0xa8, 0x1d, 0xcc, 0x7b, 0x0f, 0x8d, 0x39, 0x5f, 0xb1, 0x87, 0x70, 0x75, 0xee,
	0xaf, 0xc0, 0x0f, 0xe3, 0x40, 0x0e, 0xf3, 0x6c, 0x69, 0xce, 0xec, 0xf9, 0x4f, 0xec, 0x99, 0x8d,
	0x73, 0xa2, 0xe5, 0x71, 0x38, 0xc4, 0x84, 0xa9, 0xf1, 0x9c, 0xb2, 0xfc, 0x34, 0x3b, 0xb6, 0xfc,
	0x32, 0xf1, 0x89, 0xf2, 0xfe, 0x2c, 0xc1, 0xd6, 0xcc, 0x1f, 0x04, 0xbb, 0x06, 0xb5, 0xe3, 0x2c,
	0x8a, 0xe8, 0x47, 0x84, 0x3a, 0x5d, 0xd5, 0x32, 0xf0, 0xf0, 0x36, 0x6c, 0x1a, 0x9d, 0xc5, 0x54,
	0x17, 0x28, 0x41, 0x17, 0x6d, 0x8c, 0xb9, 0x28, 0x76, 0x17, 0xd8, 0x44, 0x4c, 0xc6, 0xb9, 0x28,
	0xdd, 0xbd, 0x3d, 0x3e, 0xd9, 0x8f, 0x49, 0xfa, 0x16, 0x6c, 0x8e, 0x6f, 0xf4, 0xd3, 0xbe, 0xb8,
	0x87, 0x59, 0x5a, 0xe3, 0xeb, 0xa3, 0x6b, 0x0f, 0xfb, 0xe2, 0xde, 0xee, 0x0d, 0xb0, 0xff, 0xb0,
	0x9d, 0x91, 0x67, 0x3b, 0xd6, 0xb3, 0x1d, 0x91, 0x84, 0x1d, 0xf4, 0x6c, 0xb7, 0x82, 0x7f, 0xab,
	0x5f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xc2, 0xee, 0x7a, 0xf6, 0x0e, 0x00, 0x00,
}
